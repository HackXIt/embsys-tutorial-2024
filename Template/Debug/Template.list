
Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e88  08005e88  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e90  08005e90  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f00  20000060  08005ef8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f60  08005ef8  00023f60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b111  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a33  00000000  00000000  0003b1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  0003ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ca  00000000  00000000  00040310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e24  00000000  00000000  000414da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4f6  00000000  00000000  000642fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d383c  00000000  00000000  000807f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062a0  00000000  00000000  00154030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0015a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005de0 	.word	0x08005de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005de0 	.word	0x08005de0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <MX_FREERTOS_Init+0x18>)
 80004d2:	2100      	movs	r1, #0
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_FREERTOS_Init+0x1c>)
 80004d6:	f002 fe67 	bl	80031a8 <osThreadNew>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a03      	ldr	r2, [pc, #12]	; (80004ec <MX_FREERTOS_Init+0x20>)
 80004de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	08005e1c 	.word	0x08005e1c
 80004e8:	080004f1 	.word	0x080004f1
 80004ec:	2000007c 	.word	0x2000007c

080004f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f002 fee7 	bl	80032cc <osDelay>
 80004fe:	e7fb      	b.n	80004f8 <StartDefaultTask+0x8>

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <MX_GPIO_Init+0x8c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a1c      	ldr	r2, [pc, #112]	; (800058c <MX_GPIO_Init+0x8c>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b1a      	ldr	r3, [pc, #104]	; (800058c <MX_GPIO_Init+0x8c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <MX_GPIO_Init+0x8c>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a16      	ldr	r2, [pc, #88]	; (800058c <MX_GPIO_Init+0x8c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_GPIO_Init+0x8c>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_GPIO_Init+0x8c>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a10      	ldr	r2, [pc, #64]	; (800058c <MX_GPIO_Init+0x8c>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_GPIO_Init+0x8c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2108      	movs	r1, #8
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <MX_GPIO_Init+0x90>)
 8000564:	f000 fcb2 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000568:	2308      	movs	r3, #8
 800056a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_GPIO_Init+0x90>)
 8000580:	f000 fb3a 	bl	8000bf8 <HAL_GPIO_Init>

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	48000400 	.word	0x48000400

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fa13 	bl	80009c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f80c 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f7ff ffae 	bl	8000500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f94a 	bl	800083c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005a8:	f002 fdb4 	bl	8003114 <osKernelInitialize>
  MX_FREERTOS_Init();
 80005ac:	f7ff ff8e 	bl	80004cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005b0:	f002 fdd4 	bl	800315c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x20>
	...

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fb20 	bl	8005c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005de:	f000 fcab 	bl	8000f38 <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 f85a 	bl	80006a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ec:	f000 fc86 	bl	8000efc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SystemClock_Config+0xc0>)
 80005f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f6:	4a20      	ldr	r2, [pc, #128]	; (8000678 <SystemClock_Config+0xc0>)
 80005f8:	f023 0318 	bic.w	r3, r3, #24
 80005fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000600:	2314      	movs	r3, #20
 8000602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000610:	2360      	movs	r3, #96	; 0x60
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fcd5 	bl	8000fe4 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000640:	f000 f82e 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2303      	movs	r3, #3
 800064a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f8d5 	bl	800180c <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000668:	f000 f81a 	bl	80006a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800066c:	f001 fd1a 	bl	80020a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	; 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d101      	bne.n	8000692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800068e:	f000 f9b1 	bl	80009f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40014400 	.word	0x40014400

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <HAL_MspInit+0x4c>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b6:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <HAL_MspInit+0x4c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6613      	str	r3, [r2, #96]	; 0x60
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_MspInit+0x4c>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_MspInit+0x4c>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6593      	str	r3, [r2, #88]	; 0x58
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_MspInit+0x4c>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	210f      	movs	r1, #15
 80006e6:	f06f 0001 	mvn.w	r0, #1
 80006ea:	f000 fa5b 	bl	8000ba4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000704:	2300      	movs	r3, #0
 8000706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <HAL_InitTick+0xc8>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <HAL_InitTick+0xc8>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	6613      	str	r3, [r2, #96]	; 0x60
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <HAL_InitTick+0xc8>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000722:	f107 020c 	add.w	r2, r7, #12
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fa31 	bl	8001b94 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000732:	f001 fa19 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8000736:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073a:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <HAL_InitTick+0xcc>)
 800073c:	fba2 2303 	umull	r2, r3, r2, r3
 8000740:	0c9b      	lsrs	r3, r3, #18
 8000742:	3b01      	subs	r3, #1
 8000744:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_InitTick+0xd0>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <HAL_InitTick+0xd4>)
 800074a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <HAL_InitTick+0xd0>)
 800074e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000752:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000754:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <HAL_InitTick+0xd0>)
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000758:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_InitTick+0xd0>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HAL_InitTick+0xd0>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_InitTick+0xd0>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800076c:	4817      	ldr	r0, [pc, #92]	; (80007cc <HAL_InitTick+0xd0>)
 800076e:	f001 fd9b 	bl	80022a8 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800077c:	2b00      	cmp	r3, #0
 800077e:	d11b      	bne.n	80007b8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <HAL_InitTick+0xd0>)
 8000782:	f001 fdf3 	bl	800236c <HAL_TIM_Base_Start_IT>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800078c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000790:	2b00      	cmp	r3, #0
 8000792:	d111      	bne.n	80007b8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000794:	2019      	movs	r0, #25
 8000796:	f000 fa21 	bl	8000bdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d808      	bhi.n	80007b2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2019      	movs	r0, #25
 80007a6:	f000 f9fd 	bl	8000ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_InitTick+0xd8>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	e002      	b.n	80007b8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3730      	adds	r7, #48	; 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	431bde83 	.word	0x431bde83
 80007cc:	20000080 	.word	0x20000080
 80007d0:	40014400 	.word	0x40014400
 80007d4:	20000004 	.word	0x20000004

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800080a:	f001 fe03 	bl	8002414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000080 	.word	0x20000080

08000818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000842:	4a15      	ldr	r2, [pc, #84]	; (8000898 <MX_USART2_UART_Init+0x5c>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART2_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART2_UART_Init+0x58>)
 8000880:	f001 ff74 	bl	800276c <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800088a:	f7ff ff09 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000cc 	.word	0x200000cc
 8000898:	40004400 	.word	0x40004400

0800089c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09e      	sub	sp, #120	; 0x78
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2254      	movs	r2, #84	; 0x54
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f005 f9a5 	bl	8005c0c <memset>
  if(uartHandle->Instance==USART2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <HAL_UART_MspInit+0xcc>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d148      	bne.n	800095e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 f9ed 	bl	8001cb8 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e4:	f7ff fedc 	bl	80006a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <HAL_UART_MspInit+0xd0>)
 80008ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ec:	4a1f      	ldr	r2, [pc, #124]	; (800096c <HAL_UART_MspInit+0xd0>)
 80008ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f2:	6593      	str	r3, [r2, #88]	; 0x58
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_UART_MspInit+0xd0>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_UART_MspInit+0xd0>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0xd0>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_UART_MspInit+0xd0>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000918:	2304      	movs	r3, #4
 800091a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000928:	2307      	movs	r3, #7
 800092a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 f95f 	bl	8000bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800093a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800093e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800094c:	2303      	movs	r3, #3
 800094e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f000 f94d 	bl	8000bf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800095e:	bf00      	nop
 8000960:	3778      	adds	r7, #120	; 0x78
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	40021000 	.word	0x40021000

08000970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000974:	f7ff ff50 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	; (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f005 f993 	bl	8005cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a2:	f7ff fdf7 	bl	8000594 <main>

080009a6 <LoopForever>:

LoopForever:
    b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009b4:	08005e98 	.word	0x08005e98
  ldr r2, =_sbss
 80009b8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009bc:	20003f60 	.word	0x20003f60

080009c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_IRQHandler>

080009c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f8de 	bl	8000b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	200f      	movs	r0, #15
 80009d4:	f7ff fe92 	bl	80006fc <HAL_InitTick>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	e001      	b.n	80009e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e4:	f7ff fe62 	bl	80006ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000154 	.word	0x20000154

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000154 	.word	0x20000154

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff4c 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb6:	f7ff ff61 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000bba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	6978      	ldr	r0, [r7, #20]
 8000bc2:	f7ff ffb1 	bl	8000b28 <NVIC_EncodePriority>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff80 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff54 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e148      	b.n	8000e9a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 813a 	beq.w	8000e94 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <HAL_GPIO_Init+0x40>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	f003 0201 	and.w	r2, r3, #1
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d017      	beq.n	8000cd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d123      	bne.n	8000d2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	691a      	ldr	r2, [r3, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	6939      	ldr	r1, [r7, #16]
 8000d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0203 	and.w	r2, r3, #3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8094 	beq.w	8000e94 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <HAL_GPIO_Init+0x2c0>)
 8000d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d70:	4a51      	ldr	r2, [pc, #324]	; (8000eb8 <HAL_GPIO_Init+0x2c0>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6613      	str	r3, [r2, #96]	; 0x60
 8000d78:	4b4f      	ldr	r3, [pc, #316]	; (8000eb8 <HAL_GPIO_Init+0x2c0>)
 8000d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d84:	4a4d      	ldr	r2, [pc, #308]	; (8000ebc <HAL_GPIO_Init+0x2c4>)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dae:	d00d      	beq.n	8000dcc <HAL_GPIO_Init+0x1d4>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a43      	ldr	r2, [pc, #268]	; (8000ec0 <HAL_GPIO_Init+0x2c8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d007      	beq.n	8000dc8 <HAL_GPIO_Init+0x1d0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a42      	ldr	r2, [pc, #264]	; (8000ec4 <HAL_GPIO_Init+0x2cc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_Init+0x1cc>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e004      	b.n	8000dce <HAL_GPIO_Init+0x1d6>
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x1d6>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_Init+0x1d6>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	f002 0203 	and.w	r2, r2, #3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dde:	4937      	ldr	r1, [pc, #220]	; (8000ebc <HAL_GPIO_Init+0x2c4>)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e10:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e64:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f47f aeaf 	bne.w	8000c08 <HAL_GPIO_Init+0x10>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40007000 	.word	0x40007000

08000f1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40007000 	.word	0x40007000

08000f38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f46:	d130      	bne.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f54:	d038      	beq.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2232      	movs	r2, #50	; 0x32
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9b      	lsrs	r3, r3, #18
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f7c:	e002      	b.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f90:	d102      	bne.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f2      	bne.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa4:	d110      	bne.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e00f      	b.n	8000fca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb6:	d007      	beq.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fc0:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40007000 	.word	0x40007000
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	431bde83 	.word	0x431bde83

08000fe4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f000 bc02 	b.w	80017fc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff8:	4b96      	ldr	r3, [pc, #600]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001002:	4b94      	ldr	r3, [pc, #592]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80e4 	beq.w	80011e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <HAL_RCC_OscConfig+0x4c>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b0c      	cmp	r3, #12
 8001024:	f040 808b 	bne.w	800113e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2b01      	cmp	r3, #1
 800102c:	f040 8087 	bne.w	800113e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001030:	4b88      	ldr	r3, [pc, #544]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x64>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e3d9      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1a      	ldr	r2, [r3, #32]
 800104c:	4b81      	ldr	r3, [pc, #516]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <HAL_RCC_OscConfig+0x7e>
 8001058:	4b7e      	ldr	r3, [pc, #504]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001060:	e005      	b.n	800106e <HAL_RCC_OscConfig+0x8a>
 8001062:	4b7c      	ldr	r3, [pc, #496]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800106e:	4293      	cmp	r3, r2
 8001070:	d223      	bcs.n	80010ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fdbe 	bl	8001bf8 <RCC_SetFlashLatencyFromMSIRange>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e3ba      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001086:	4b73      	ldr	r3, [pc, #460]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a72      	ldr	r2, [pc, #456]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b70      	ldr	r3, [pc, #448]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	496d      	ldr	r1, [pc, #436]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010a4:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	4968      	ldr	r1, [pc, #416]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
 80010b8:	e025      	b.n	8001106 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ba:	4b66      	ldr	r3, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a65      	ldr	r2, [pc, #404]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b63      	ldr	r3, [pc, #396]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4960      	ldr	r1, [pc, #384]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d8:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	495b      	ldr	r1, [pc, #364]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fd7e 	bl	8001bf8 <RCC_SetFlashLatencyFromMSIRange>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e37a      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001106:	f000 fc81 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 800110a:	4602      	mov	r2, r0
 800110c:	4b51      	ldr	r3, [pc, #324]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	4950      	ldr	r1, [pc, #320]	; (8001258 <HAL_RCC_OscConfig+0x274>)
 8001118:	5ccb      	ldrb	r3, [r1, r3]
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	4a4e      	ldr	r2, [pc, #312]	; (800125c <HAL_RCC_OscConfig+0x278>)
 8001124:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001126:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <HAL_RCC_OscConfig+0x27c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fae6 	bl	80006fc <HAL_InitTick>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d052      	beq.n	80011e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	e35e      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d032      	beq.n	80011ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001146:	4b43      	ldr	r3, [pc, #268]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a42      	ldr	r2, [pc, #264]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001152:	f7ff fc63 	bl	8000a1c <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800115a:	f7ff fc5f 	bl	8000a1c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e347      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a35      	ldr	r2, [pc, #212]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4930      	ldr	r1, [pc, #192]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	492b      	ldr	r1, [pc, #172]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
 80011aa:	e01a      	b.n	80011e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc30 	bl	8000a1c <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c0:	f7ff fc2c 	bl	8000a1c <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e314      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1dc>
 80011de:	e000      	b.n	80011e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d073      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_OscConfig+0x21c>
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2b0c      	cmp	r3, #12
 80011f8:	d10e      	bne.n	8001218 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d10b      	bne.n	8001218 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d063      	beq.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d15f      	bne.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e2f1      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d106      	bne.n	8001230 <HAL_RCC_OscConfig+0x24c>
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e025      	b.n	800127c <HAL_RCC_OscConfig+0x298>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001238:	d114      	bne.n	8001264 <HAL_RCC_OscConfig+0x280>
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a02      	ldr	r2, [pc, #8]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e013      	b.n	800127c <HAL_RCC_OscConfig+0x298>
 8001254:	40021000 	.word	0x40021000
 8001258:	08005e40 	.word	0x08005e40
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004
 8001264:	4ba0      	ldr	r3, [pc, #640]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a9f      	ldr	r2, [pc, #636]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b9d      	ldr	r3, [pc, #628]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a9c      	ldr	r2, [pc, #624]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fbca 	bl	8000a1c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fbc6 	bl	8000a1c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e2ae      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	4b92      	ldr	r3, [pc, #584]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x2a8>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fbb6 	bl	8000a1c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fbb2 	bl	8000a1c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e29a      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c6:	4b88      	ldr	r3, [pc, #544]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2d0>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d060      	beq.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_OscConfig+0x310>
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	d119      	bne.n	8001322 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d116      	bne.n	8001322 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f4:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x328>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e277      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	061b      	lsls	r3, r3, #24
 800131a:	4973      	ldr	r1, [pc, #460]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001320:	e040      	b.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d023      	beq.n	8001372 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800132a:	4b6f      	ldr	r3, [pc, #444]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6e      	ldr	r2, [pc, #440]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001336:	f7ff fb71 	bl	8000a1c <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fb6d 	bl	8000a1c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e255      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001350:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	495f      	ldr	r1, [pc, #380]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e018      	b.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001372:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a5c      	ldr	r2, [pc, #368]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800137c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fb4d 	bl	8000a1c <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fb49 	bl	8000a1c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e231      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001398:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d03c      	beq.n	800142a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013be:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fb28 	bl	8000a1c <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fb24 	bl	8000a1c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e20c      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ef      	beq.n	80013d0 <HAL_RCC_OscConfig+0x3ec>
 80013f0:	e01b      	b.n	800142a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f8:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff fb0b 	bl	8000a1c <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fb07 	bl	8000a1c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e1ef      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800141c:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ef      	bne.n	800140a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80a6 	beq.w	8001584 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10d      	bne.n	8001464 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001452:	6593      	str	r3, [r2, #88]	; 0x58
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001460:	2301      	movs	r3, #1
 8001462:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_RCC_OscConfig+0x508>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d118      	bne.n	80014a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_RCC_OscConfig+0x508>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_RCC_OscConfig+0x508>)
 8001476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147c:	f7ff face 	bl	8000a1c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001484:	f7ff faca 	bl	8000a1c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1b2      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_RCC_OscConfig+0x508>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d108      	bne.n	80014bc <HAL_RCC_OscConfig+0x4d8>
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ba:	e029      	b.n	8001510 <HAL_RCC_OscConfig+0x52c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d115      	bne.n	80014f0 <HAL_RCC_OscConfig+0x50c>
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014da:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e4:	e014      	b.n	8001510 <HAL_RCC_OscConfig+0x52c>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40007000 	.word	0x40007000
 80014f0:	4b9a      	ldr	r3, [pc, #616]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80014f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f6:	4a99      	ldr	r2, [pc, #612]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001500:	4b96      	ldr	r3, [pc, #600]	; (800175c <HAL_RCC_OscConfig+0x778>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001506:	4a95      	ldr	r2, [pc, #596]	; (800175c <HAL_RCC_OscConfig+0x778>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d016      	beq.n	8001546 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fa80 	bl	8000a1c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800151e:	e00a      	b.n	8001536 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff fa7c 	bl	8000a1c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	; 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e162      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <HAL_RCC_OscConfig+0x778>)
 8001538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ed      	beq.n	8001520 <HAL_RCC_OscConfig+0x53c>
 8001544:	e015      	b.n	8001572 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff fa69 	bl	8000a1c <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fa65 	bl	8000a1c <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e14b      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001564:	4b7d      	ldr	r3, [pc, #500]	; (800175c <HAL_RCC_OscConfig+0x778>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ed      	bne.n	800154e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001572:	7ffb      	ldrb	r3, [r7, #31]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b78      	ldr	r3, [pc, #480]	; (800175c <HAL_RCC_OscConfig+0x778>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	4a77      	ldr	r2, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x778>)
 800157e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001582:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	2b00      	cmp	r3, #0
 800158e:	d03c      	beq.n	800160a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001598:	4b70      	ldr	r3, [pc, #448]	; (800175c <HAL_RCC_OscConfig+0x778>)
 800159a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800159e:	4a6f      	ldr	r2, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fa38 	bl	8000a1c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b0:	f7ff fa34 	bl	8000a1c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e11c      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015c2:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80015c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0ef      	beq.n	80015b0 <HAL_RCC_OscConfig+0x5cc>
 80015d0:	e01b      	b.n	800160a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015d2:	4b62      	ldr	r3, [pc, #392]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80015d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d8:	4a60      	ldr	r2, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e2:	f7ff fa1b 	bl	8000a1c <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ea:	f7ff fa17 	bl	8000a1c <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0ff      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80015fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ef      	bne.n	80015ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80f3 	beq.w	80017fa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	2b02      	cmp	r3, #2
 800161a:	f040 80c9 	bne.w	80017b0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800161e:	4b4f      	ldr	r3, [pc, #316]	; (800175c <HAL_RCC_OscConfig+0x778>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 0203 	and.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	429a      	cmp	r2, r3
 8001630:	d12c      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	3b01      	subs	r3, #1
 800163e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d123      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d11b      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d113      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	3b01      	subs	r3, #1
 8001672:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d109      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	3b01      	subs	r3, #1
 8001686:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d06b      	beq.n	8001764 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d062      	beq.n	8001758 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_RCC_OscConfig+0x778>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0ac      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a2d      	ldr	r2, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ae:	f7ff f9b5 	bl	8000a1c <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff f9b1 	bl	8000a1c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e099      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_RCC_OscConfig+0x778>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_RCC_OscConfig+0x77c>)
 80016da:	4013      	ands	r3, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016e4:	3a01      	subs	r2, #1
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ee:	0212      	lsls	r2, r2, #8
 80016f0:	4311      	orrs	r1, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016f6:	0852      	lsrs	r2, r2, #1
 80016f8:	3a01      	subs	r2, #1
 80016fa:	0552      	lsls	r2, r2, #21
 80016fc:	4311      	orrs	r1, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001702:	0852      	lsrs	r2, r2, #1
 8001704:	3a01      	subs	r2, #1
 8001706:	0652      	lsls	r2, r2, #25
 8001708:	4311      	orrs	r1, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800170e:	06d2      	lsls	r2, r2, #27
 8001710:	430a      	orrs	r2, r1
 8001712:	4912      	ldr	r1, [pc, #72]	; (800175c <HAL_RCC_OscConfig+0x778>)
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_OscConfig+0x778>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_RCC_OscConfig+0x778>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001722:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_RCC_OscConfig+0x778>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <HAL_RCC_OscConfig+0x778>)
 800172a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001730:	f7ff f974 	bl	8000a1c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff f970 	bl	8000a1c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e058      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <HAL_RCC_OscConfig+0x778>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001756:	e050      	b.n	80017fa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e04f      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
 800175c:	40021000 	.word	0x40021000
 8001760:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d144      	bne.n	80017fa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a23      	ldr	r2, [pc, #140]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 8001776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 8001782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001786:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001788:	f7ff f948 	bl	8000a1c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff f944 	bl	8000a1c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e02c      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x7ac>
 80017ae:	e024      	b.n	80017fa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d01f      	beq.n	80017f6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 80017bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff f92b 	bl	8000a1c <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff f927 	bl	8000a1c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e00f      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4905      	ldr	r1, [pc, #20]	; (8001804 <HAL_RCC_OscConfig+0x820>)
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x824>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
 80017f4:	e001      	b.n	80017fa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40021000 	.word	0x40021000
 8001808:	feeefffc 	.word	0xfeeefffc

0800180c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0e7      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d910      	bls.n	8001850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0207 	bic.w	r2, r3, #7
 8001836:	4970      	ldr	r1, [pc, #448]	; (80019f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b6e      	ldr	r3, [pc, #440]	; (80019f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0cf      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d010      	beq.n	800187e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4b66      	ldr	r3, [pc, #408]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001868:	429a      	cmp	r2, r3
 800186a:	d908      	bls.n	800187e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4960      	ldr	r1, [pc, #384]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d04c      	beq.n	8001924 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d121      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0a6      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018aa:	4b54      	ldr	r3, [pc, #336]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d115      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e09a      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c2:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e08e      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d2:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e086      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f023 0203 	bic.w	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4943      	ldr	r1, [pc, #268]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018f4:	f7ff f892 	bl	8000a1c <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7ff f88e 	bl	8000a1c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e06e      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 020c 	and.w	r2, r3, #12
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	429a      	cmp	r2, r3
 8001922:	d1eb      	bne.n	80018fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d010      	beq.n	8001952 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800193c:	429a      	cmp	r2, r3
 800193e:	d208      	bcs.n	8001952 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	492b      	ldr	r1, [pc, #172]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d210      	bcs.n	8001982 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 0207 	bic.w	r2, r3, #7
 8001968:	4923      	ldr	r1, [pc, #140]	; (80019f8 <HAL_RCC_ClockConfig+0x1ec>)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d001      	beq.n	8001982 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e036      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4918      	ldr	r1, [pc, #96]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d009      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4910      	ldr	r1, [pc, #64]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019c0:	f000 f824 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	490b      	ldr	r1, [pc, #44]	; (8001a00 <HAL_RCC_ClockConfig+0x1f4>)
 80019d2:	5ccb      	ldrb	r3, [r1, r3]
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
 80019dc:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 80019de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1fc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fe89 	bl	80006fc <HAL_InitTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08005e40 	.word	0x08005e40
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x34>
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d121      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d11e      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e005      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a68:	4a2b      	ldr	r2, [pc, #172]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10d      	bne.n	8001a94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	e004      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d134      	bne.n	8001b04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d003      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ab0:	e005      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ab4:	617b      	str	r3, [r7, #20]
      break;
 8001ab6:	e005      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aba:	617b      	str	r3, [r7, #20]
      break;
 8001abc:	e002      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	617b      	str	r3, [r7, #20]
      break;
 8001ac2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	3301      	adds	r3, #1
 8001ad0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	fb03 f202 	mul.w	r2, r3, r2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	0e5b      	lsrs	r3, r3, #25
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	3301      	adds	r3, #1
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b04:	69bb      	ldr	r3, [r7, #24]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08005e58 	.word	0x08005e58
 8001b1c:	00f42400 	.word	0x00f42400
 8001b20:	007a1200 	.word	0x007a1200

08001b24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000000 	.word	0x20000000

08001b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4904      	ldr	r1, [pc, #16]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08005e50 	.word	0x08005e50

08001b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b6c:	f7ff ffda 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0adb      	lsrs	r3, r3, #11
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4904      	ldr	r1, [pc, #16]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08005e50 	.word	0x08005e50

08001b94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCC_GetClockConfig+0x60>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c10:	f7ff f984 	bl	8000f1c <HAL_PWREx_GetVoltageRange>
 8001c14:	6178      	str	r0, [r7, #20]
 8001c16:	e014      	b.n	8001c42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	4a24      	ldr	r2, [pc, #144]	; (8001cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6593      	str	r3, [r2, #88]	; 0x58
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c30:	f7ff f974 	bl	8000f1c <HAL_PWREx_GetVoltageRange>
 8001c34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c48:	d10b      	bne.n	8001c62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d919      	bls.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2ba0      	cmp	r3, #160	; 0xa0
 8001c54:	d902      	bls.n	8001c5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c56:	2302      	movs	r3, #2
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	e013      	b.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	e010      	b.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b80      	cmp	r3, #128	; 0x80
 8001c66:	d902      	bls.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c68:	2303      	movs	r3, #3
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	e00a      	b.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b80      	cmp	r3, #128	; 0x80
 8001c72:	d102      	bne.n	8001c7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c74:	2302      	movs	r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	e004      	b.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b70      	cmp	r3, #112	; 0x70
 8001c7e:	d101      	bne.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c80:	2301      	movs	r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 0207 	bic.w	r2, r3, #7
 8001c8c:	4909      	ldr	r1, [pc, #36]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d031      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cdc:	d01a      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001cde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ce2:	d814      	bhi.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cec:	d10f      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001cee:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cfa:	e00c      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f9de 	bl	80020c4 <RCCEx_PLLSAI1_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d0c:	e003      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	74fb      	strb	r3, [r7, #19]
      break;
 8001d12:	e000      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d16:	7cfb      	ldrb	r3, [r7, #19]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d1c:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	494e      	ldr	r1, [pc, #312]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d32:	e001      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 809e 	beq.w	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d4a:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	4a3f      	ldr	r2, [pc, #252]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7c:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a39      	ldr	r2, [pc, #228]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d88:	f7fe fe48 	bl	8000a1c <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d8e:	e009      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d90:	f7fe fe44 	bl	8000a1c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d902      	bls.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	74fb      	strb	r3, [r7, #19]
        break;
 8001da2:	e005      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da4:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ef      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d15a      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01e      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d019      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ddc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dfe:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d016      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe fe04 	bl	8000a1c <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e16:	e00b      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7fe fe00 	bl	8000a1c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d902      	bls.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	74fb      	strb	r3, [r7, #19]
            break;
 8001e2e:	e006      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ec      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e52:	4904      	ldr	r1, [pc, #16]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e5a:	e009      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	74bb      	strb	r3, [r7, #18]
 8001e60:	e006      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e70:	7c7b      	ldrb	r3, [r7, #17]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d105      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4b8a      	ldr	r3, [pc, #552]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a89      	ldr	r2, [pc, #548]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e8e:	4b84      	ldr	r3, [pc, #528]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e94:	f023 0203 	bic.w	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4980      	ldr	r1, [pc, #512]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	f023 020c 	bic.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	4978      	ldr	r1, [pc, #480]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ed2:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	496f      	ldr	r1, [pc, #444]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	4967      	ldr	r1, [pc, #412]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f16:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f24:	495e      	ldr	r1, [pc, #376]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	4956      	ldr	r1, [pc, #344]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f5a:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	494d      	ldr	r1, [pc, #308]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d028      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4945      	ldr	r1, [pc, #276]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f9a:	d106      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f9c:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a3f      	ldr	r2, [pc, #252]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa6:	60d3      	str	r3, [r2, #12]
 8001fa8:	e011      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f882 	bl	80020c4 <RCCEx_PLLSAI1_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d028      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fda:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	492d      	ldr	r1, [pc, #180]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ff8:	d106      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ffa:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002004:	60d3      	str	r3, [r2, #12]
 8002006:	e011      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002010:	d10c      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f853 	bl	80020c4 <RCCEx_PLLSAI1_Config>
 800201e:	4603      	mov	r3, r0
 8002020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01c      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002046:	4916      	ldr	r1, [pc, #88]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002056:	d10c      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	2102      	movs	r1, #2
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f830 	bl	80020c4 <RCCEx_PLLSAI1_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002094:	7cbb      	ldrb	r3, [r7, #18]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000

080020c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020d2:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d018      	beq.n	8002110 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020de:	4b71      	ldr	r3, [pc, #452]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0203 	and.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d10d      	bne.n	800210a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
       ||
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020f6:	4b6b      	ldr	r3, [pc, #428]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
       ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d047      	beq.n	800219a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e044      	b.n	800219a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d018      	beq.n	800214a <RCCEx_PLLSAI1_Config+0x86>
 8002118:	2b03      	cmp	r3, #3
 800211a:	d825      	bhi.n	8002168 <RCCEx_PLLSAI1_Config+0xa4>
 800211c:	2b01      	cmp	r3, #1
 800211e:	d002      	beq.n	8002126 <RCCEx_PLLSAI1_Config+0x62>
 8002120:	2b02      	cmp	r3, #2
 8002122:	d009      	beq.n	8002138 <RCCEx_PLLSAI1_Config+0x74>
 8002124:	e020      	b.n	8002168 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002126:	4b5f      	ldr	r3, [pc, #380]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11d      	bne.n	800216e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002136:	e01a      	b.n	800216e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002138:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d116      	bne.n	8002172 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002148:	e013      	b.n	8002172 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800214a:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10f      	bne.n	8002176 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002156:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002166:	e006      	b.n	8002176 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      break;
 800216c:	e004      	b.n	8002178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800216e:	bf00      	nop
 8002170:	e002      	b.n	8002178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002172:	bf00      	nop
 8002174:	e000      	b.n	8002178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002176:	bf00      	nop
    }

    if(status == HAL_OK)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800217e:	4b49      	ldr	r3, [pc, #292]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	430b      	orrs	r3, r1
 8002194:	4943      	ldr	r1, [pc, #268]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d17c      	bne.n	800229a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3f      	ldr	r2, [pc, #252]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ac:	f7fe fc36 	bl	8000a1c <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021b2:	e009      	b.n	80021c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021b4:	f7fe fc32 	bl	8000a1c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d902      	bls.n	80021c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	73fb      	strb	r3, [r7, #15]
        break;
 80021c6:	e005      	b.n	80021d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021c8:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ef      	bne.n	80021b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d15f      	bne.n	800229a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d110      	bne.n	8002202 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80021e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6892      	ldr	r2, [r2, #8]
 80021f0:	0211      	lsls	r1, r2, #8
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	06d2      	lsls	r2, r2, #27
 80021f8:	430a      	orrs	r2, r1
 80021fa:	492a      	ldr	r1, [pc, #168]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	610b      	str	r3, [r1, #16]
 8002200:	e027      	b.n	8002252 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d112      	bne.n	800222e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002208:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002210:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6892      	ldr	r2, [r2, #8]
 8002218:	0211      	lsls	r1, r2, #8
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6912      	ldr	r2, [r2, #16]
 800221e:	0852      	lsrs	r2, r2, #1
 8002220:	3a01      	subs	r2, #1
 8002222:	0552      	lsls	r2, r2, #21
 8002224:	430a      	orrs	r2, r1
 8002226:	491f      	ldr	r1, [pc, #124]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	610b      	str	r3, [r1, #16]
 800222c:	e011      	b.n	8002252 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002236:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	0211      	lsls	r1, r2, #8
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6952      	ldr	r2, [r2, #20]
 8002244:	0852      	lsrs	r2, r2, #1
 8002246:	3a01      	subs	r2, #1
 8002248:	0652      	lsls	r2, r2, #25
 800224a:	430a      	orrs	r2, r1
 800224c:	4915      	ldr	r1, [pc, #84]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800224e:	4313      	orrs	r3, r2
 8002250:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800225c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe fbdd 	bl	8000a1c <HAL_GetTick>
 8002262:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002264:	e009      	b.n	800227a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002266:	f7fe fbd9 	bl	8000a1c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d902      	bls.n	800227a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	73fb      	strb	r3, [r7, #15]
          break;
 8002278:	e005      	b.n	8002286 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0ef      	beq.n	8002266 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002296:	4313      	orrs	r3, r2
 8002298:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000

080022a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e049      	b.n	800234e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f841 	bl	8002356 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f000 f9be 	bl	8002668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d001      	beq.n	8002384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e03b      	b.n	80023fc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_TIM_Base_Start_IT+0x9c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0x4e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ae:	d004      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0x4e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a15      	ldr	r2, [pc, #84]	; (800240c <HAL_TIM_Base_Start_IT+0xa0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d115      	bne.n	80023e6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_TIM_Base_Start_IT+0xa4>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d015      	beq.n	80023f8 <HAL_TIM_Base_Start_IT+0x8c>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d2:	d011      	beq.n	80023f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	e008      	b.n	80023f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e000      	b.n	80023fa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40014000 	.word	0x40014000
 8002410:	00010007 	.word	0x00010007

08002414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d020      	beq.n	8002478 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0202 	mvn.w	r2, #2
 8002448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8e4 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f8d6 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f8e7 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d020      	beq.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0204 	mvn.w	r2, #4
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8be 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f8b0 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8c1 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d020      	beq.n	8002510 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01b      	beq.n	8002510 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0208 	mvn.w	r2, #8
 80024e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2204      	movs	r2, #4
 80024e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f898 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f88a 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f89b 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d020      	beq.n	800255c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01b      	beq.n	800255c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0210 	mvn.w	r2, #16
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2208      	movs	r2, #8
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f872 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f864 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f875 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0201 	mvn.w	r2, #1
 8002578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe f87e 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8d0 	bl	8002744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8c8 	bl	8002758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00c      	beq.n	80025ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f834 	bl	8002654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0220 	mvn.w	r2, #32
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f890 	bl	8002730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <TIM_Base_SetConfig+0xbc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x20>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002686:	d108      	bne.n	800269a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <TIM_Base_SetConfig+0xbc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00b      	beq.n	80026ba <TIM_Base_SetConfig+0x52>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d007      	beq.n	80026ba <TIM_Base_SetConfig+0x52>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <TIM_Base_SetConfig+0xc0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d003      	beq.n	80026ba <TIM_Base_SetConfig+0x52>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <TIM_Base_SetConfig+0xc4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d108      	bne.n	80026cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <TIM_Base_SetConfig+0xbc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <TIM_Base_SetConfig+0xa0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <TIM_Base_SetConfig+0xc0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_Base_SetConfig+0xa0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <TIM_Base_SetConfig+0xc4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d103      	bne.n	8002710 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	615a      	str	r2, [r3, #20]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40014000 	.word	0x40014000
 800272c:	40014400 	.word	0x40014400

08002730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e040      	b.n	8002800 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe f884 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa54 	bl	8002c60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f825 	bl	8002808 <UART_SetConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e01b      	b.n	8002800 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fad3 	bl	8002da4 <UART_CheckIdleState>
 80027fe:	4603      	mov	r3, r0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800280c:	b08a      	sub	sp, #40	; 0x28
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	431a      	orrs	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	4313      	orrs	r3, r2
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4bb4      	ldr	r3, [pc, #720]	; (8002b08 <UART_SetConfig+0x300>)
 8002838:	4013      	ands	r3, r2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002840:	430b      	orrs	r3, r1
 8002842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4aa9      	ldr	r2, [pc, #676]	; (8002b0c <UART_SetConfig+0x304>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	4313      	orrs	r3, r2
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4aa0      	ldr	r2, [pc, #640]	; (8002b10 <UART_SetConfig+0x308>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d126      	bne.n	80028e0 <UART_SetConfig+0xd8>
 8002892:	4ba0      	ldr	r3, [pc, #640]	; (8002b14 <UART_SetConfig+0x30c>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b03      	cmp	r3, #3
 800289e:	d81b      	bhi.n	80028d8 <UART_SetConfig+0xd0>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <UART_SetConfig+0xa0>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028c9 	.word	0x080028c9
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	080028d1 	.word	0x080028d1
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028be:	e080      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80028c0:	2302      	movs	r3, #2
 80028c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028c6:	e07c      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80028c8:	2304      	movs	r3, #4
 80028ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ce:	e078      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80028d0:	2308      	movs	r3, #8
 80028d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028d6:	e074      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80028d8:	2310      	movs	r3, #16
 80028da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028de:	e070      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a8c      	ldr	r2, [pc, #560]	; (8002b18 <UART_SetConfig+0x310>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d138      	bne.n	800295c <UART_SetConfig+0x154>
 80028ea:	4b8a      	ldr	r3, [pc, #552]	; (8002b14 <UART_SetConfig+0x30c>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	d82d      	bhi.n	8002954 <UART_SetConfig+0x14c>
 80028f8:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <UART_SetConfig+0xf8>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002935 	.word	0x08002935
 8002904:	08002955 	.word	0x08002955
 8002908:	08002955 	.word	0x08002955
 800290c:	08002955 	.word	0x08002955
 8002910:	08002945 	.word	0x08002945
 8002914:	08002955 	.word	0x08002955
 8002918:	08002955 	.word	0x08002955
 800291c:	08002955 	.word	0x08002955
 8002920:	0800293d 	.word	0x0800293d
 8002924:	08002955 	.word	0x08002955
 8002928:	08002955 	.word	0x08002955
 800292c:	08002955 	.word	0x08002955
 8002930:	0800294d 	.word	0x0800294d
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800293a:	e042      	b.n	80029c2 <UART_SetConfig+0x1ba>
 800293c:	2302      	movs	r3, #2
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002942:	e03e      	b.n	80029c2 <UART_SetConfig+0x1ba>
 8002944:	2304      	movs	r3, #4
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800294a:	e03a      	b.n	80029c2 <UART_SetConfig+0x1ba>
 800294c:	2308      	movs	r3, #8
 800294e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002952:	e036      	b.n	80029c2 <UART_SetConfig+0x1ba>
 8002954:	2310      	movs	r3, #16
 8002956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800295a:	e032      	b.n	80029c2 <UART_SetConfig+0x1ba>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6a      	ldr	r2, [pc, #424]	; (8002b0c <UART_SetConfig+0x304>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d12a      	bne.n	80029bc <UART_SetConfig+0x1b4>
 8002966:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <UART_SetConfig+0x30c>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002974:	d01a      	beq.n	80029ac <UART_SetConfig+0x1a4>
 8002976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800297a:	d81b      	bhi.n	80029b4 <UART_SetConfig+0x1ac>
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002980:	d00c      	beq.n	800299c <UART_SetConfig+0x194>
 8002982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002986:	d815      	bhi.n	80029b4 <UART_SetConfig+0x1ac>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <UART_SetConfig+0x18c>
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	d008      	beq.n	80029a4 <UART_SetConfig+0x19c>
 8002992:	e00f      	b.n	80029b4 <UART_SetConfig+0x1ac>
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e012      	b.n	80029c2 <UART_SetConfig+0x1ba>
 800299c:	2302      	movs	r3, #2
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a2:	e00e      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80029a4:	2304      	movs	r3, #4
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029aa:	e00a      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80029ac:	2308      	movs	r3, #8
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029b2:	e006      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80029b4:	2310      	movs	r3, #16
 80029b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ba:	e002      	b.n	80029c2 <UART_SetConfig+0x1ba>
 80029bc:	2310      	movs	r3, #16
 80029be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <UART_SetConfig+0x304>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d17a      	bne.n	8002ac2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d824      	bhi.n	8002a1e <UART_SetConfig+0x216>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <UART_SetConfig+0x1d4>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	08002a01 	.word	0x08002a01
 80029e0:	08002a1f 	.word	0x08002a1f
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002a1f 	.word	0x08002a1f
 80029ec:	08002a0f 	.word	0x08002a0f
 80029f0:	08002a1f 	.word	0x08002a1f
 80029f4:	08002a1f 	.word	0x08002a1f
 80029f8:	08002a1f 	.word	0x08002a1f
 80029fc:	08002a17 	.word	0x08002a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a00:	f7ff f89c 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 8002a04:	61f8      	str	r0, [r7, #28]
        break;
 8002a06:	e010      	b.n	8002a2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a08:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <UART_SetConfig+0x314>)
 8002a0a:	61fb      	str	r3, [r7, #28]
        break;
 8002a0c:	e00d      	b.n	8002a2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a0e:	f7fe fffd 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8002a12:	61f8      	str	r0, [r7, #28]
        break;
 8002a14:	e009      	b.n	8002a2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1a:	61fb      	str	r3, [r7, #28]
        break;
 8002a1c:	e005      	b.n	8002a2a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8107 	beq.w	8002c40 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d305      	bcc.n	8002a4e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d903      	bls.n	8002a56 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a54:	e0f4      	b.n	8002c40 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4615      	mov	r5, r2
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	022b      	lsls	r3, r5, #8
 8002a68:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a6c:	0222      	lsls	r2, r4, #8
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	6849      	ldr	r1, [r1, #4]
 8002a72:	0849      	lsrs	r1, r1, #1
 8002a74:	2000      	movs	r0, #0
 8002a76:	4688      	mov	r8, r1
 8002a78:	4681      	mov	r9, r0
 8002a7a:	eb12 0a08 	adds.w	sl, r2, r8
 8002a7e:	eb43 0b09 	adc.w	fp, r3, r9
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a90:	4650      	mov	r0, sl
 8002a92:	4659      	mov	r1, fp
 8002a94:	f7fd fb9c 	bl	80001d0 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aa6:	d308      	bcc.n	8002aba <UART_SetConfig+0x2b2>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aae:	d204      	bcs.n	8002aba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	e0c2      	b.n	8002c40 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ac0:	e0be      	b.n	8002c40 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aca:	d16a      	bne.n	8002ba2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d834      	bhi.n	8002b3e <UART_SetConfig+0x336>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <UART_SetConfig+0x2d4>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b01 	.word	0x08002b01
 8002ae0:	08002b21 	.word	0x08002b21
 8002ae4:	08002b29 	.word	0x08002b29
 8002ae8:	08002b3f 	.word	0x08002b3f
 8002aec:	08002b2f 	.word	0x08002b2f
 8002af0:	08002b3f 	.word	0x08002b3f
 8002af4:	08002b3f 	.word	0x08002b3f
 8002af8:	08002b3f 	.word	0x08002b3f
 8002afc:	08002b37 	.word	0x08002b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b00:	f7ff f81c 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 8002b04:	61f8      	str	r0, [r7, #28]
        break;
 8002b06:	e020      	b.n	8002b4a <UART_SetConfig+0x342>
 8002b08:	efff69f3 	.word	0xefff69f3
 8002b0c:	40008000 	.word	0x40008000
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40004400 	.word	0x40004400
 8002b1c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7ff f822 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002b24:	61f8      	str	r0, [r7, #28]
        break;
 8002b26:	e010      	b.n	8002b4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b28:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <UART_SetConfig+0x454>)
 8002b2a:	61fb      	str	r3, [r7, #28]
        break;
 8002b2c:	e00d      	b.n	8002b4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2e:	f7fe ff6d 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8002b32:	61f8      	str	r0, [r7, #28]
        break;
 8002b34:	e009      	b.n	8002b4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3a:	61fb      	str	r3, [r7, #28]
        break;
 8002b3c:	e005      	b.n	8002b4a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d077      	beq.n	8002c40 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005a      	lsls	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d916      	bls.n	8002b9a <UART_SetConfig+0x392>
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b72:	d212      	bcs.n	8002b9a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f023 030f 	bic.w	r3, r3, #15
 8002b7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	8afb      	ldrh	r3, [r7, #22]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	8afa      	ldrh	r2, [r7, #22]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e052      	b.n	8002c40 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ba0:	e04e      	b.n	8002c40 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d827      	bhi.n	8002bfa <UART_SetConfig+0x3f2>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <UART_SetConfig+0x3a8>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002bdd 	.word	0x08002bdd
 8002bb8:	08002be5 	.word	0x08002be5
 8002bbc:	08002bfb 	.word	0x08002bfb
 8002bc0:	08002beb 	.word	0x08002beb
 8002bc4:	08002bfb 	.word	0x08002bfb
 8002bc8:	08002bfb 	.word	0x08002bfb
 8002bcc:	08002bfb 	.word	0x08002bfb
 8002bd0:	08002bf3 	.word	0x08002bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f7fe ffb2 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 8002bd8:	61f8      	str	r0, [r7, #28]
        break;
 8002bda:	e014      	b.n	8002c06 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bdc:	f7fe ffc4 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002be0:	61f8      	str	r0, [r7, #28]
        break;
 8002be2:	e010      	b.n	8002c06 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <UART_SetConfig+0x454>)
 8002be6:	61fb      	str	r3, [r7, #28]
        break;
 8002be8:	e00d      	b.n	8002c06 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bea:	f7fe ff0f 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8002bee:	61f8      	str	r0, [r7, #28]
        break;
 8002bf0:	e009      	b.n	8002c06 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf6:	61fb      	str	r3, [r7, #28]
        break;
 8002bf8:	e005      	b.n	8002c06 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c04:	bf00      	nop
    }

    if (pclk != 0U)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d019      	beq.n	8002c40 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	085a      	lsrs	r2, r3, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	441a      	add	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	d909      	bls.n	8002c3a <UART_SetConfig+0x432>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d205      	bcs.n	8002c3a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	e002      	b.n	8002c40 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3728      	adds	r7, #40	; 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5a:	bf00      	nop
 8002c5c:	00f42400 	.word	0x00f42400

08002c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01a      	beq.n	8002d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5e:	d10a      	bne.n	8002d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]
  }
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b098      	sub	sp, #96	; 0x60
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002db4:	f7fd fe32 	bl	8000a1c <HAL_GetTick>
 8002db8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d12e      	bne.n	8002e26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f88c 	bl	8002ef4 <UART_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d021      	beq.n	8002e26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df6:	653b      	str	r3, [r7, #80]	; 0x50
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
 8002e02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e6      	bne.n	8002de2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e062      	b.n	8002eec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d149      	bne.n	8002ec8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f856 	bl	8002ef4 <UART_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d03c      	beq.n	8002ec8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e6      	bne.n	8002e4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3308      	adds	r3, #8
 8002e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea0:	61fa      	str	r2, [r7, #28]
 8002ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	69b9      	ldr	r1, [r7, #24]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	617b      	str	r3, [r7, #20]
   return(result);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e011      	b.n	8002eec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3758      	adds	r7, #88	; 0x58
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f04:	e049      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d045      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fd fd85 	bl	8000a1c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e048      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d031      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d110      	bne.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f838 	bl	8002fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2208      	movs	r2, #8
 8002f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e029      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f74:	d111      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f81e 	bl	8002fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e00f      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d0a6      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b095      	sub	sp, #84	; 0x54
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e6      	bne.n	8002fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3308      	adds	r3, #8
 8003002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	61fb      	str	r3, [r7, #28]
   return(result);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	64bb      	str	r3, [r7, #72]	; 0x48
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800301c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e5      	bne.n	8002ffc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003034:	2b01      	cmp	r3, #1
 8003036:	d118      	bne.n	800306a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	60bb      	str	r3, [r7, #8]
   return(result);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f023 0310 	bic.w	r3, r3, #16
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	613b      	str	r3, [r7, #16]
   return(result);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e6      	bne.n	8003038 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800307e:	bf00      	nop
 8003080:	3754      	adds	r7, #84	; 0x54
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <__NVIC_SetPriority>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	; (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	; (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <SysTick_Handler+0x1c>)
 80030e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80030e8:	f001 fd28 	bl	8004b3c <xTaskGetSchedulerState>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80030f2:	f002 fb11 	bl	8005718 <xPortSysTickHandler>
  }
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010

08003100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003104:	2100      	movs	r1, #0
 8003106:	f06f 0004 	mvn.w	r0, #4
 800310a:	f7ff ffbf 	bl	800308c <__NVIC_SetPriority>
#endif
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800311a:	f3ef 8305 	mrs	r3, IPSR
 800311e:	603b      	str	r3, [r7, #0]
  return(result);
 8003120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003126:	f06f 0305 	mvn.w	r3, #5
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	e00c      	b.n	8003148 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <osKernelInitialize+0x44>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <osKernelInitialize+0x44>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800313c:	2300      	movs	r3, #0
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	e002      	b.n	8003148 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003148:	687b      	ldr	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000158 	.word	0x20000158

0800315c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003162:	f3ef 8305 	mrs	r3, IPSR
 8003166:	603b      	str	r3, [r7, #0]
  return(result);
 8003168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <osKernelStart+0x1a>
    stat = osErrorISR;
 800316e:	f06f 0305 	mvn.w	r3, #5
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	e010      	b.n	8003198 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <osKernelStart+0x48>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d109      	bne.n	8003192 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800317e:	f7ff ffbf 	bl	8003100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <osKernelStart+0x48>)
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003188:	f001 f87c 	bl	8004284 <vTaskStartScheduler>
      stat = osOK;
 800318c:	2300      	movs	r3, #0
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	e002      	b.n	8003198 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003198:	687b      	ldr	r3, [r7, #4]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000158 	.word	0x20000158

080031a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08e      	sub	sp, #56	; 0x38
 80031ac:	af04      	add	r7, sp, #16
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b8:	f3ef 8305 	mrs	r3, IPSR
 80031bc:	617b      	str	r3, [r7, #20]
  return(result);
 80031be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d17e      	bne.n	80032c2 <osThreadNew+0x11a>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d07b      	beq.n	80032c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80031ce:	2318      	movs	r3, #24
 80031d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d045      	beq.n	800326e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <osThreadNew+0x48>
        name = attr->name;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <osThreadNew+0x6e>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b38      	cmp	r3, #56	; 0x38
 8003208:	d805      	bhi.n	8003216 <osThreadNew+0x6e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <osThreadNew+0x72>
        return (NULL);
 8003216:	2300      	movs	r3, #0
 8003218:	e054      	b.n	80032c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00e      	beq.n	8003250 <osThreadNew+0xa8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2ba7      	cmp	r3, #167	; 0xa7
 8003238:	d90a      	bls.n	8003250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <osThreadNew+0xa8>
        mem = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	e010      	b.n	8003272 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10c      	bne.n	8003272 <osThreadNew+0xca>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d108      	bne.n	8003272 <osThreadNew+0xca>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <osThreadNew+0xca>
          mem = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	e001      	b.n	8003272 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d110      	bne.n	800329a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003280:	9202      	str	r2, [sp, #8]
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fe0c 	bl	8003eac <xTaskCreateStatic>
 8003294:	4603      	mov	r3, r0
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e013      	b.n	80032c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d110      	bne.n	80032c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fe57 	bl	8003f66 <xTaskCreate>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d001      	beq.n	80032c2 <osThreadNew+0x11a>
            hTask = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032c2:	693b      	ldr	r3, [r7, #16]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	; 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032d4:	f3ef 8305 	mrs	r3, IPSR
 80032d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80032da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <osDelay+0x1c>
    stat = osErrorISR;
 80032e0:	f06f 0305 	mvn.w	r3, #5
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e007      	b.n	80032f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 ff92 	bl	800421c <vTaskDelay>
    }
  }

  return (stat);
 80032f8:	68fb      	ldr	r3, [r7, #12]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a07      	ldr	r2, [pc, #28]	; (8003330 <vApplicationGetIdleTaskMemory+0x2c>)
 8003314:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4a06      	ldr	r2, [pc, #24]	; (8003334 <vApplicationGetIdleTaskMemory+0x30>)
 800331a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	2000015c 	.word	0x2000015c
 8003334:	20000204 	.word	0x20000204

08003338 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <vApplicationGetTimerTaskMemory+0x2c>)
 8003348:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <vApplicationGetTimerTaskMemory+0x30>)
 800334e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003356:	601a      	str	r2, [r3, #0]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	20000404 	.word	0x20000404
 8003368:	200004ac 	.word	0x200004ac

0800336c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 0208 	add.w	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f103 0208 	add.w	r2, r3, #8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f103 0208 	add.w	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d103      	bne.n	800342e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e00c      	b.n	8003448 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3308      	adds	r3, #8
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e002      	b.n	800343c <vListInsert+0x2e>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	d2f6      	bcs.n	8003436 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6852      	ldr	r2, [r2, #4]
 80034a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d103      	bne.n	80034b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	1e5a      	subs	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034fe:	f002 f879 	bl	80055f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	441a      	add	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	3b01      	subs	r3, #1
 8003530:	68f9      	ldr	r1, [r7, #12]
 8003532:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	441a      	add	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d114      	bne.n	800357e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01a      	beq.n	8003592 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3310      	adds	r3, #16
 8003560:	4618      	mov	r0, r3
 8003562:	f001 f929 	bl	80047b8 <xTaskRemoveFromEventList>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <xQueueGenericReset+0xcc>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	e009      	b.n	8003592 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3310      	adds	r3, #16
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fef2 	bl	800336c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3324      	adds	r3, #36	; 0x24
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff feed 	bl	800336c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003592:	f002 f85f 	bl	8005654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003596:	2301      	movs	r3, #1
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08e      	sub	sp, #56	; 0x38
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <xQueueGenericCreateStatic+0x52>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <xQueueGenericCreateStatic+0x56>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <xQueueGenericCreateStatic+0x58>
 80035fa:	2300      	movs	r3, #0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	623b      	str	r3, [r7, #32]
}
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <xQueueGenericCreateStatic+0x7e>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <xQueueGenericCreateStatic+0x82>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <xQueueGenericCreateStatic+0x84>
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	61fb      	str	r3, [r7, #28]
}
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003642:	2350      	movs	r3, #80	; 0x50
 8003644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b50      	cmp	r3, #80	; 0x50
 800364a:	d00a      	beq.n	8003662 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	61bb      	str	r3, [r7, #24]
}
 800365e:	bf00      	nop
 8003660:	e7fe      	b.n	8003660 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003662:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003676:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	4613      	mov	r3, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f805 	bl	8003694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800368c:	4618      	mov	r0, r3
 800368e:	3730      	adds	r7, #48	; 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e002      	b.n	80036b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036c2:	2101      	movs	r1, #1
 80036c4:	69b8      	ldr	r0, [r7, #24]
 80036c6:	f7ff ff05 	bl	80034d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xQueueGenericSend+0x32>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <xQueueGenericSend+0x40>
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <xQueueGenericSend+0x44>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <xQueueGenericSend+0x46>
 8003720:	2300      	movs	r3, #0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <xQueueGenericSend+0x60>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003738:	bf00      	nop
 800373a:	e7fe      	b.n	800373a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d103      	bne.n	800374a <xQueueGenericSend+0x6e>
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <xQueueGenericSend+0x72>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <xQueueGenericSend+0x74>
 800374e:	2300      	movs	r3, #0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <xQueueGenericSend+0x8e>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	623b      	str	r3, [r7, #32]
}
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800376a:	f001 f9e7 	bl	8004b3c <xTaskGetSchedulerState>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xQueueGenericSend+0x9e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueGenericSend+0xa2>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueGenericSend+0xa4>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueGenericSend+0xbe>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	61fb      	str	r3, [r7, #28]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800379a:	f001 ff2b 	bl	80055f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d302      	bcc.n	80037b0 <xQueueGenericSend+0xd4>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d129      	bne.n	8003804 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b6:	f000 fa0b 	bl	8003bd0 <prvCopyDataToQueue>
 80037ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d010      	beq.n	80037e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fff5 	bl	80047b8 <xTaskRemoveFromEventList>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037d4:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <xQueueGenericSend+0x1f8>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	e00a      	b.n	80037fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037ec:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <xQueueGenericSend+0x1f8>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037fc:	f001 ff2a 	bl	8005654 <vPortExitCritical>
				return pdPASS;
 8003800:	2301      	movs	r3, #1
 8003802:	e063      	b.n	80038cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800380a:	f001 ff23 	bl	8005654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800380e:	2300      	movs	r3, #0
 8003810:	e05c      	b.n	80038cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	4618      	mov	r0, r3
 800381e:	f001 f82f 	bl	8004880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003822:	2301      	movs	r3, #1
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003826:	f001 ff15 	bl	8005654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800382a:	f000 fd9b 	bl	8004364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800382e:	f001 fee1 	bl	80055f4 <vPortEnterCritical>
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003838:	b25b      	sxtb	r3, r3
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d103      	bne.n	8003848 <xQueueGenericSend+0x16c>
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800384e:	b25b      	sxtb	r3, r3
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d103      	bne.n	800385e <xQueueGenericSend+0x182>
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800385e:	f001 fef9 	bl	8005654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003862:	1d3a      	adds	r2, r7, #4
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f001 f81e 	bl	80048ac <xTaskCheckForTimeOut>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d124      	bne.n	80038c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003878:	f000 faa2 	bl	8003dc0 <prvIsQueueFull>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d018      	beq.n	80038b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	3310      	adds	r3, #16
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f000 ff44 	bl	8004718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003892:	f000 fa2d 	bl	8003cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003896:	f000 fd73 	bl	8004380 <xTaskResumeAll>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	f47f af7c 	bne.w	800379a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <xQueueGenericSend+0x1f8>)
 80038a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	e772      	b.n	800379a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038b6:	f000 fa1b 	bl	8003cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ba:	f000 fd61 	bl	8004380 <xTaskResumeAll>
 80038be:	e76c      	b.n	800379a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038c2:	f000 fa15 	bl	8003cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038c6:	f000 fd5b 	bl	8004380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3738      	adds	r7, #56	; 0x38
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b090      	sub	sp, #64	; 0x40
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <xQueueGenericSendFromISR+0x3c>
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <xQueueGenericSendFromISR+0x40>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <xQueueGenericSendFromISR+0x42>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d103      	bne.n	8003942 <xQueueGenericSendFromISR+0x6a>
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <xQueueGenericSendFromISR+0x6e>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <xQueueGenericSendFromISR+0x70>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	623b      	str	r3, [r7, #32]
}
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003962:	f001 ff29 	bl	80057b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003966:	f3ef 8211 	mrs	r2, BASEPRI
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	61fa      	str	r2, [r7, #28]
 800397c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800397e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <xQueueGenericSendFromISR+0xbc>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d12f      	bne.n	80039f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800399a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039aa:	f000 f911 	bl	8003bd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d112      	bne.n	80039de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	3324      	adds	r3, #36	; 0x24
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fef7 	bl	80047b8 <xTaskRemoveFromEventList>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00e      	beq.n	80039ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e007      	b.n	80039ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039e2:	3301      	adds	r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	b25a      	sxtb	r2, r3
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039ee:	2301      	movs	r3, #1
 80039f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80039f2:	e001      	b.n	80039f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3740      	adds	r7, #64	; 0x40
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08c      	sub	sp, #48	; 0x30
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <xQueueReceive+0x30>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	623b      	str	r3, [r7, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <xQueueReceive+0x3e>
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <xQueueReceive+0x42>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <xQueueReceive+0x44>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <xQueueReceive+0x5e>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	61fb      	str	r3, [r7, #28]
}
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a6e:	f001 f865 	bl	8004b3c <xTaskGetSchedulerState>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <xQueueReceive+0x6e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <xQueueReceive+0x72>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <xQueueReceive+0x74>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xQueueReceive+0x8e>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	61bb      	str	r3, [r7, #24]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9e:	f001 fda9 	bl	80055f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01f      	beq.n	8003aee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab2:	f000 f8f7 	bl	8003ca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1e5a      	subs	r2, r3, #1
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00f      	beq.n	8003ae6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	3310      	adds	r3, #16
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fe74 	bl	80047b8 <xTaskRemoveFromEventList>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ad6:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <xQueueReceive+0x1bc>)
 8003ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ae6:	f001 fdb5 	bl	8005654 <vPortExitCritical>
				return pdPASS;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e069      	b.n	8003bc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003af4:	f001 fdae 	bl	8005654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e062      	b.n	8003bc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b02:	f107 0310 	add.w	r3, r7, #16
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 feba 	bl	8004880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b10:	f001 fda0 	bl	8005654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b14:	f000 fc26 	bl	8004364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b18:	f001 fd6c 	bl	80055f4 <vPortEnterCritical>
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b22:	b25b      	sxtb	r3, r3
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d103      	bne.n	8003b32 <xQueueReceive+0x122>
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b38:	b25b      	sxtb	r3, r3
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d103      	bne.n	8003b48 <xQueueReceive+0x138>
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b48:	f001 fd84 	bl	8005654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b4c:	1d3a      	adds	r2, r7, #4
 8003b4e:	f107 0310 	add.w	r3, r7, #16
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fea9 	bl	80048ac <xTaskCheckForTimeOut>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d123      	bne.n	8003ba8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b62:	f000 f917 	bl	8003d94 <prvIsQueueEmpty>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d017      	beq.n	8003b9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	3324      	adds	r3, #36	; 0x24
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fdcf 	bl	8004718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7c:	f000 f8b8 	bl	8003cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b80:	f000 fbfe 	bl	8004380 <xTaskResumeAll>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d189      	bne.n	8003a9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <xQueueReceive+0x1bc>)
 8003b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	e780      	b.n	8003a9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9e:	f000 f8a7 	bl	8003cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ba2:	f000 fbed 	bl	8004380 <xTaskResumeAll>
 8003ba6:	e77a      	b.n	8003a9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003baa:	f000 f8a1 	bl	8003cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bae:	f000 fbe7 	bl	8004380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb4:	f000 f8ee 	bl	8003d94 <prvIsQueueEmpty>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f43f af6f 	beq.w	8003a9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3730      	adds	r7, #48	; 0x30
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d14d      	bne.n	8003c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 ffbc 	bl	8004b78 <xTaskPriorityDisinherit>
 8003c00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	e043      	b.n	8003c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d119      	bne.n	8003c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6858      	ldr	r0, [r3, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	f002 f87a 	bl	8005d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	441a      	add	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d32b      	bcc.n	8003c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	e026      	b.n	8003c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68d8      	ldr	r0, [r3, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	f002 f860 	bl	8005d14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	425b      	negs	r3, r3
 8003c5e:	441a      	add	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d207      	bcs.n	8003c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	425b      	negs	r3, r3
 8003c7a:	441a      	add	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d105      	bne.n	8003c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c9a:	697b      	ldr	r3, [r7, #20]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	441a      	add	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d303      	bcc.n	8003cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68d9      	ldr	r1, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6838      	ldr	r0, [r7, #0]
 8003ce4:	f002 f816 	bl	8005d14 <memcpy>
	}
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cf8:	f001 fc7c 	bl	80055f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d04:	e011      	b.n	8003d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fd50 	bl	80047b8 <xTaskRemoveFromEventList>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d1e:	f000 fe27 	bl	8004970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	dce9      	bgt.n	8003d06 <prvUnlockQueue+0x16>
 8003d32:	e000      	b.n	8003d36 <prvUnlockQueue+0x46>
					break;
 8003d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d3e:	f001 fc89 	bl	8005654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d42:	f001 fc57 	bl	80055f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d4e:	e011      	b.n	8003d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d012      	beq.n	8003d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fd2b 	bl	80047b8 <xTaskRemoveFromEventList>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d68:	f000 fe02 	bl	8004970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d6c:	7bbb      	ldrb	r3, [r7, #14]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	dce9      	bgt.n	8003d50 <prvUnlockQueue+0x60>
 8003d7c:	e000      	b.n	8003d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	22ff      	movs	r2, #255	; 0xff
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d88:	f001 fc64 	bl	8005654 <vPortExitCritical>
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d9c:	f001 fc2a 	bl	80055f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e001      	b.n	8003db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003db2:	f001 fc4f 	bl	8005654 <vPortExitCritical>

	return xReturn;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dc8:	f001 fc14 	bl	80055f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d102      	bne.n	8003dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e001      	b.n	8003de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003de2:	f001 fc37 	bl	8005654 <vPortExitCritical>

	return xReturn;
 8003de6:	68fb      	ldr	r3, [r7, #12]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e014      	b.n	8003e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e00:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <vQueueAddToRegistry+0x50>)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10b      	bne.n	8003e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e0c:	490c      	ldr	r1, [pc, #48]	; (8003e40 <vQueueAddToRegistry+0x50>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e16:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <vQueueAddToRegistry+0x50>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e22:	e006      	b.n	8003e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b07      	cmp	r3, #7
 8003e2e:	d9e7      	bls.n	8003e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	200008ac 	.word	0x200008ac

08003e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e54:	f001 fbce 	bl	80055f4 <vPortEnterCritical>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d103      	bne.n	8003e6e <vQueueWaitForMessageRestricted+0x2a>
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d103      	bne.n	8003e84 <vQueueWaitForMessageRestricted+0x40>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e84:	f001 fbe6 	bl	8005654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	3324      	adds	r3, #36	; 0x24
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fc61 	bl	8004760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e9e:	6978      	ldr	r0, [r7, #20]
 8003ea0:	f7ff ff26 	bl	8003cf0 <prvUnlockQueue>
	}
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	; 0x38
 8003eb0:	af04      	add	r7, sp, #16
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10a      	bne.n	8003ed6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	623b      	str	r3, [r7, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	e7fe      	b.n	8003ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61fb      	str	r3, [r7, #28]
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ef2:	23a8      	movs	r3, #168	; 0xa8
 8003ef4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2ba8      	cmp	r3, #168	; 0xa8
 8003efa:	d00a      	beq.n	8003f12 <xTaskCreateStatic+0x66>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	61bb      	str	r3, [r7, #24]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01e      	beq.n	8003f58 <xTaskCreateStatic+0xac>
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01b      	beq.n	8003f58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f32:	2300      	movs	r3, #0
 8003f34:	9303      	str	r3, [sp, #12]
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	9302      	str	r3, [sp, #8]
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f850 	bl	8003ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f52:	f000 f8f3 	bl	800413c <prvAddNewTaskToReadyList>
 8003f56:	e001      	b.n	8003f5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f5c:	697b      	ldr	r3, [r7, #20]
	}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3728      	adds	r7, #40	; 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b08c      	sub	sp, #48	; 0x30
 8003f6a:	af04      	add	r7, sp, #16
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f001 fc5c 	bl	8005838 <pvPortMalloc>
 8003f80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f88:	20a8      	movs	r0, #168	; 0xa8
 8003f8a:	f001 fc55 	bl	8005838 <pvPortMalloc>
 8003f8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f9c:	e005      	b.n	8003faa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f9e:	6978      	ldr	r0, [r7, #20]
 8003fa0:	f001 fd16 	bl	80059d0 <vPortFree>
 8003fa4:	e001      	b.n	8003faa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d017      	beq.n	8003fe0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9303      	str	r3, [sp, #12]
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	9302      	str	r3, [sp, #8]
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f80e 	bl	8003ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fd4:	69f8      	ldr	r0, [r7, #28]
 8003fd6:	f000 f8b1 	bl	800413c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	e002      	b.n	8003fe6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	461a      	mov	r2, r3
 8004008:	21a5      	movs	r1, #165	; 0xa5
 800400a:	f001 fdff 	bl	8005c0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004018:	3b01      	subs	r3, #1
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f023 0307 	bic.w	r3, r3, #7
 8004026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	617b      	str	r3, [r7, #20]
}
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01f      	beq.n	800408e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e012      	b.n	800407a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	7819      	ldrb	r1, [r3, #0]
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	3334      	adds	r3, #52	; 0x34
 8004064:	460a      	mov	r2, r1
 8004066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	3301      	adds	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b0f      	cmp	r3, #15
 800407e:	d9e9      	bls.n	8004054 <prvInitialiseNewTask+0x64>
 8004080:	e000      	b.n	8004084 <prvInitialiseNewTask+0x94>
			{
				break;
 8004082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800408c:	e003      	b.n	8004096 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2b37      	cmp	r3, #55	; 0x37
 800409a:	d901      	bls.n	80040a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800409c:	2337      	movs	r3, #55	; 0x37
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	2200      	movs	r2, #0
 80040b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	3304      	adds	r3, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff f978 	bl	80033ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	3318      	adds	r3, #24
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff f973 	bl	80033ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	3354      	adds	r3, #84	; 0x54
 80040f0:	224c      	movs	r2, #76	; 0x4c
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fd89 	bl	8005c0c <memset>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <prvInitialiseNewTask+0x140>)
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <prvInitialiseNewTask+0x144>)
 8004104:	65da      	str	r2, [r3, #92]	; 0x5c
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	4a0b      	ldr	r2, [pc, #44]	; (8004138 <prvInitialiseNewTask+0x148>)
 800410a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	69b8      	ldr	r0, [r7, #24]
 8004112:	f001 f941 	bl	8005398 <pxPortInitialiseStack>
 8004116:	4602      	mov	r2, r0
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004126:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004128:	bf00      	nop
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20003e20 	.word	0x20003e20
 8004134:	20003e88 	.word	0x20003e88
 8004138:	20003ef0 	.word	0x20003ef0

0800413c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004144:	f001 fa56 	bl	80055f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004148:	4b2d      	ldr	r3, [pc, #180]	; (8004200 <prvAddNewTaskToReadyList+0xc4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <prvAddNewTaskToReadyList+0xc4>)
 8004150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004152:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800415a:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004160:	4b27      	ldr	r3, [pc, #156]	; (8004200 <prvAddNewTaskToReadyList+0xc4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d110      	bne.n	800418a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004168:	f000 fc26 	bl	80049b8 <prvInitialiseTaskLists>
 800416c:	e00d      	b.n	800418a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <prvAddNewTaskToReadyList+0xcc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004176:	4b23      	ldr	r3, [pc, #140]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	429a      	cmp	r2, r3
 8004182:	d802      	bhi.n	800418a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800418a:	4b20      	ldr	r3, [pc, #128]	; (800420c <prvAddNewTaskToReadyList+0xd0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3301      	adds	r3, #1
 8004190:	4a1e      	ldr	r2, [pc, #120]	; (800420c <prvAddNewTaskToReadyList+0xd0>)
 8004192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <prvAddNewTaskToReadyList+0xd0>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <prvAddNewTaskToReadyList+0xd4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d903      	bls.n	80041b0 <prvAddNewTaskToReadyList+0x74>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	4a18      	ldr	r2, [pc, #96]	; (8004210 <prvAddNewTaskToReadyList+0xd4>)
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4a15      	ldr	r2, [pc, #84]	; (8004214 <prvAddNewTaskToReadyList+0xd8>)
 80041be:	441a      	add	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7ff f8fd 	bl	80033c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041cc:	f001 fa42 	bl	8005654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041d0:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <prvAddNewTaskToReadyList+0xcc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00e      	beq.n	80041f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d207      	bcs.n	80041f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <prvAddNewTaskToReadyList+0xdc>)
 80041e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000dc0 	.word	0x20000dc0
 8004204:	200008ec 	.word	0x200008ec
 8004208:	20000dcc 	.word	0x20000dcc
 800420c:	20000ddc 	.word	0x20000ddc
 8004210:	20000dc8 	.word	0x20000dc8
 8004214:	200008f0 	.word	0x200008f0
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d017      	beq.n	800425e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <vTaskDelay+0x60>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <vTaskDelay+0x30>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60bb      	str	r3, [r7, #8]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800424c:	f000 f88a 	bl	8004364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004250:	2100      	movs	r1, #0
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fcfe 	bl	8004c54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004258:	f000 f892 	bl	8004380 <xTaskResumeAll>
 800425c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <vTaskDelay+0x64>)
 8004266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000de8 	.word	0x20000de8
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004292:	463a      	mov	r2, r7
 8004294:	1d39      	adds	r1, r7, #4
 8004296:	f107 0308 	add.w	r3, r7, #8
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f832 	bl	8003304 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	9202      	str	r2, [sp, #8]
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2300      	movs	r3, #0
 80042b0:	460a      	mov	r2, r1
 80042b2:	4924      	ldr	r1, [pc, #144]	; (8004344 <vTaskStartScheduler+0xc0>)
 80042b4:	4824      	ldr	r0, [pc, #144]	; (8004348 <vTaskStartScheduler+0xc4>)
 80042b6:	f7ff fdf9 	bl	8003eac <xTaskCreateStatic>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a23      	ldr	r2, [pc, #140]	; (800434c <vTaskStartScheduler+0xc8>)
 80042be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042c0:	4b22      	ldr	r3, [pc, #136]	; (800434c <vTaskStartScheduler+0xc8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042c8:	2301      	movs	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e001      	b.n	80042d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d102      	bne.n	80042de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042d8:	f000 fd10 	bl	8004cfc <xTimerCreateTimerTask>
 80042dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d11b      	bne.n	800431c <vTaskStartScheduler+0x98>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	613b      	str	r3, [r7, #16]
}
 80042f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <vTaskStartScheduler+0xcc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3354      	adds	r3, #84	; 0x54
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <vTaskStartScheduler+0xd0>)
 8004300:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <vTaskStartScheduler+0xd4>)
 8004304:	f04f 32ff 	mov.w	r2, #4294967295
 8004308:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <vTaskStartScheduler+0xd8>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004310:	4b13      	ldr	r3, [pc, #76]	; (8004360 <vTaskStartScheduler+0xdc>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004316:	f001 f8cb 	bl	80054b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800431a:	e00e      	b.n	800433a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d10a      	bne.n	800433a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
}
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <vTaskStartScheduler+0xb4>
}
 800433a:	bf00      	nop
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	08005e04 	.word	0x08005e04
 8004348:	08004989 	.word	0x08004989
 800434c:	20000de4 	.word	0x20000de4
 8004350:	200008ec 	.word	0x200008ec
 8004354:	2000005c 	.word	0x2000005c
 8004358:	20000de0 	.word	0x20000de0
 800435c:	20000dcc 	.word	0x20000dcc
 8004360:	20000dc4 	.word	0x20000dc4

08004364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004368:	4b04      	ldr	r3, [pc, #16]	; (800437c <vTaskSuspendAll+0x18>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	4a03      	ldr	r2, [pc, #12]	; (800437c <vTaskSuspendAll+0x18>)
 8004370:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20000de8 	.word	0x20000de8

08004380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800438e:	4b42      	ldr	r3, [pc, #264]	; (8004498 <xTaskResumeAll+0x118>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <xTaskResumeAll+0x2c>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	603b      	str	r3, [r7, #0]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043ac:	f001 f922 	bl	80055f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043b0:	4b39      	ldr	r3, [pc, #228]	; (8004498 <xTaskResumeAll+0x118>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	4a38      	ldr	r2, [pc, #224]	; (8004498 <xTaskResumeAll+0x118>)
 80043b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ba:	4b37      	ldr	r3, [pc, #220]	; (8004498 <xTaskResumeAll+0x118>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d162      	bne.n	8004488 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <xTaskResumeAll+0x11c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d05e      	beq.n	8004488 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ca:	e02f      	b.n	800442c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043cc:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <xTaskResumeAll+0x120>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3318      	adds	r3, #24
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff f851 	bl	8003480 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff f84c 	bl	8003480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ec:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <xTaskResumeAll+0x124>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d903      	bls.n	80043fc <xTaskResumeAll+0x7c>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <xTaskResumeAll+0x124>)
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <xTaskResumeAll+0x128>)
 800440a:	441a      	add	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f7fe ffd7 	bl	80033c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <xTaskResumeAll+0x12c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	429a      	cmp	r2, r3
 8004424:	d302      	bcc.n	800442c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004426:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <xTaskResumeAll+0x130>)
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <xTaskResumeAll+0x120>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1cb      	bne.n	80043cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800443a:	f000 fb5f 	bl	8004afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <xTaskResumeAll+0x134>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d010      	beq.n	800446c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800444a:	f000 f847 	bl	80044dc <xTaskIncrementTick>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004454:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <xTaskResumeAll+0x130>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3b01      	subs	r3, #1
 800445e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f1      	bne.n	800444a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <xTaskResumeAll+0x134>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <xTaskResumeAll+0x130>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <xTaskResumeAll+0x138>)
 800447a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004488:	f001 f8e4 	bl	8005654 <vPortExitCritical>

	return xAlreadyYielded;
 800448c:	68bb      	ldr	r3, [r7, #8]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000de8 	.word	0x20000de8
 800449c:	20000dc0 	.word	0x20000dc0
 80044a0:	20000d80 	.word	0x20000d80
 80044a4:	20000dc8 	.word	0x20000dc8
 80044a8:	200008f0 	.word	0x200008f0
 80044ac:	200008ec 	.word	0x200008ec
 80044b0:	20000dd4 	.word	0x20000dd4
 80044b4:	20000dd0 	.word	0x20000dd0
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <xTaskGetTickCount+0x1c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044c8:	687b      	ldr	r3, [r7, #4]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000dc4 	.word	0x20000dc4

080044dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e6:	4b4f      	ldr	r3, [pc, #316]	; (8004624 <xTaskIncrementTick+0x148>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 808f 	bne.w	800460e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044f0:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <xTaskIncrementTick+0x14c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044f8:	4a4b      	ldr	r2, [pc, #300]	; (8004628 <xTaskIncrementTick+0x14c>)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d120      	bne.n	8004546 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004504:	4b49      	ldr	r3, [pc, #292]	; (800462c <xTaskIncrementTick+0x150>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <xTaskIncrementTick+0x48>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	603b      	str	r3, [r7, #0]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <xTaskIncrementTick+0x46>
 8004524:	4b41      	ldr	r3, [pc, #260]	; (800462c <xTaskIncrementTick+0x150>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <xTaskIncrementTick+0x154>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3f      	ldr	r2, [pc, #252]	; (800462c <xTaskIncrementTick+0x150>)
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4a3f      	ldr	r2, [pc, #252]	; (8004630 <xTaskIncrementTick+0x154>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b3e      	ldr	r3, [pc, #248]	; (8004634 <xTaskIncrementTick+0x158>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	4a3d      	ldr	r2, [pc, #244]	; (8004634 <xTaskIncrementTick+0x158>)
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	f000 fadb 	bl	8004afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004546:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <xTaskIncrementTick+0x15c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	429a      	cmp	r2, r3
 800454e:	d349      	bcc.n	80045e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004550:	4b36      	ldr	r3, [pc, #216]	; (800462c <xTaskIncrementTick+0x150>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455a:	4b37      	ldr	r3, [pc, #220]	; (8004638 <xTaskIncrementTick+0x15c>)
 800455c:	f04f 32ff 	mov.w	r2, #4294967295
 8004560:	601a      	str	r2, [r3, #0]
					break;
 8004562:	e03f      	b.n	80045e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004564:	4b31      	ldr	r3, [pc, #196]	; (800462c <xTaskIncrementTick+0x150>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d203      	bcs.n	8004584 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800457c:	4a2e      	ldr	r2, [pc, #184]	; (8004638 <xTaskIncrementTick+0x15c>)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004582:	e02f      	b.n	80045e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	3304      	adds	r3, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe ff79 	bl	8003480 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3318      	adds	r3, #24
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe ff70 	bl	8003480 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <xTaskIncrementTick+0x160>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d903      	bls.n	80045b4 <xTaskIncrementTick+0xd8>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a22      	ldr	r2, [pc, #136]	; (800463c <xTaskIncrementTick+0x160>)
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <xTaskIncrementTick+0x164>)
 80045c2:	441a      	add	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe fefb 	bl	80033c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <xTaskIncrementTick+0x168>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3b8      	bcc.n	8004550 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045de:	2301      	movs	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e2:	e7b5      	b.n	8004550 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045e4:	4b17      	ldr	r3, [pc, #92]	; (8004644 <xTaskIncrementTick+0x168>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	4915      	ldr	r1, [pc, #84]	; (8004640 <xTaskIncrementTick+0x164>)
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d901      	bls.n	8004600 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <xTaskIncrementTick+0x16c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e004      	b.n	8004618 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800460e:	4b0f      	ldr	r3, [pc, #60]	; (800464c <xTaskIncrementTick+0x170>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a0d      	ldr	r2, [pc, #52]	; (800464c <xTaskIncrementTick+0x170>)
 8004616:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004618:	697b      	ldr	r3, [r7, #20]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000de8 	.word	0x20000de8
 8004628:	20000dc4 	.word	0x20000dc4
 800462c:	20000d78 	.word	0x20000d78
 8004630:	20000d7c 	.word	0x20000d7c
 8004634:	20000dd8 	.word	0x20000dd8
 8004638:	20000de0 	.word	0x20000de0
 800463c:	20000dc8 	.word	0x20000dc8
 8004640:	200008f0 	.word	0x200008f0
 8004644:	200008ec 	.word	0x200008ec
 8004648:	20000dd4 	.word	0x20000dd4
 800464c:	20000dd0 	.word	0x20000dd0

08004650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004656:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <vTaskSwitchContext+0xb0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800465e:	4b29      	ldr	r3, [pc, #164]	; (8004704 <vTaskSwitchContext+0xb4>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004664:	e046      	b.n	80046f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004666:	4b27      	ldr	r3, [pc, #156]	; (8004704 <vTaskSwitchContext+0xb4>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <vTaskSwitchContext+0xb8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e010      	b.n	8004696 <vTaskSwitchContext+0x46>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <vTaskSwitchContext+0x40>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	607b      	str	r3, [r7, #4]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <vTaskSwitchContext+0x3e>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	491d      	ldr	r1, [pc, #116]	; (800470c <vTaskSwitchContext+0xbc>)
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0e4      	beq.n	8004674 <vTaskSwitchContext+0x24>
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a15      	ldr	r2, [pc, #84]	; (800470c <vTaskSwitchContext+0xbc>)
 80046b6:	4413      	add	r3, r2
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	605a      	str	r2, [r3, #4]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	3308      	adds	r3, #8
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d104      	bne.n	80046da <vTaskSwitchContext+0x8a>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a0b      	ldr	r2, [pc, #44]	; (8004710 <vTaskSwitchContext+0xc0>)
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4a08      	ldr	r2, [pc, #32]	; (8004708 <vTaskSwitchContext+0xb8>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <vTaskSwitchContext+0xc0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3354      	adds	r3, #84	; 0x54
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <vTaskSwitchContext+0xc4>)
 80046f2:	6013      	str	r3, [r2, #0]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20000de8 	.word	0x20000de8
 8004704:	20000dd4 	.word	0x20000dd4
 8004708:	20000dc8 	.word	0x20000dc8
 800470c:	200008f0 	.word	0x200008f0
 8004710:	200008ec 	.word	0x200008ec
 8004714:	2000005c 	.word	0x2000005c

08004718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	60fb      	str	r3, [r7, #12]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <vTaskPlaceOnEventList+0x44>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3318      	adds	r3, #24
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fe fe61 	bl	800340e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800474c:	2101      	movs	r1, #1
 800474e:	6838      	ldr	r0, [r7, #0]
 8004750:	f000 fa80 	bl	8004c54 <prvAddCurrentTaskToDelayedList>
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	200008ec 	.word	0x200008ec

08004760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	617b      	str	r3, [r7, #20]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3318      	adds	r3, #24
 800478e:	4619      	mov	r1, r3
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7fe fe18 	bl	80033c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
 80047a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	68b8      	ldr	r0, [r7, #8]
 80047a6:	f000 fa55 	bl	8004c54 <prvAddCurrentTaskToDelayedList>
	}
 80047aa:	bf00      	nop
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200008ec 	.word	0x200008ec

080047b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60fb      	str	r3, [r7, #12]
}
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3318      	adds	r3, #24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe fe49 	bl	8003480 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ee:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <xTaskRemoveFromEventList+0xb0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11d      	bne.n	8004832 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fe40 	bl	8003480 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4b19      	ldr	r3, [pc, #100]	; (800486c <xTaskRemoveFromEventList+0xb4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d903      	bls.n	8004814 <xTaskRemoveFromEventList+0x5c>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	4a16      	ldr	r2, [pc, #88]	; (800486c <xTaskRemoveFromEventList+0xb4>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <xTaskRemoveFromEventList+0xb8>)
 8004822:	441a      	add	r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f7fe fdcb 	bl	80033c6 <vListInsertEnd>
 8004830:	e005      	b.n	800483e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3318      	adds	r3, #24
 8004836:	4619      	mov	r1, r3
 8004838:	480e      	ldr	r0, [pc, #56]	; (8004874 <xTaskRemoveFromEventList+0xbc>)
 800483a:	f7fe fdc4 	bl	80033c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <xTaskRemoveFromEventList+0xc0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	429a      	cmp	r2, r3
 800484a:	d905      	bls.n	8004858 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <xTaskRemoveFromEventList+0xc4>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e001      	b.n	800485c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800485c:	697b      	ldr	r3, [r7, #20]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000de8 	.word	0x20000de8
 800486c:	20000dc8 	.word	0x20000dc8
 8004870:	200008f0 	.word	0x200008f0
 8004874:	20000d80 	.word	0x20000d80
 8004878:	200008ec 	.word	0x200008ec
 800487c:	20000dd4 	.word	0x20000dd4

08004880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <vTaskInternalSetTimeOutState+0x24>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <vTaskInternalSetTimeOutState+0x28>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	605a      	str	r2, [r3, #4]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	20000dd8 	.word	0x20000dd8
 80048a8:	20000dc4 	.word	0x20000dc4

080048ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	613b      	str	r3, [r7, #16]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	60fb      	str	r3, [r7, #12]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048ee:	f000 fe81 	bl	80055f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <xTaskCheckForTimeOut+0xbc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d102      	bne.n	8004912 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e023      	b.n	800495a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <xTaskCheckForTimeOut+0xc0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d007      	beq.n	800492e <xTaskCheckForTimeOut+0x82>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	429a      	cmp	r2, r3
 8004926:	d302      	bcc.n	800492e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e015      	b.n	800495a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	429a      	cmp	r2, r3
 8004936:	d20b      	bcs.n	8004950 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ff9b 	bl	8004880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	e004      	b.n	800495a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800495a:	f000 fe7b 	bl	8005654 <vPortExitCritical>

	return xReturn;
 800495e:	69fb      	ldr	r3, [r7, #28]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000dc4 	.word	0x20000dc4
 800496c:	20000dd8 	.word	0x20000dd8

08004970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <vTaskMissedYield+0x14>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	20000dd4 	.word	0x20000dd4

08004988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004990:	f000 f852 	bl	8004a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <prvIdleTask+0x28>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d9f9      	bls.n	8004990 <prvIdleTask+0x8>
			{
				taskYIELD();
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <prvIdleTask+0x2c>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049ac:	e7f0      	b.n	8004990 <prvIdleTask+0x8>
 80049ae:	bf00      	nop
 80049b0:	200008f0 	.word	0x200008f0
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	e00c      	b.n	80049de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <prvInitialiseTaskLists+0x60>)
 80049d0:	4413      	add	r3, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fcca 	bl	800336c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3301      	adds	r3, #1
 80049dc:	607b      	str	r3, [r7, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b37      	cmp	r3, #55	; 0x37
 80049e2:	d9ef      	bls.n	80049c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049e4:	480d      	ldr	r0, [pc, #52]	; (8004a1c <prvInitialiseTaskLists+0x64>)
 80049e6:	f7fe fcc1 	bl	800336c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049ea:	480d      	ldr	r0, [pc, #52]	; (8004a20 <prvInitialiseTaskLists+0x68>)
 80049ec:	f7fe fcbe 	bl	800336c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049f0:	480c      	ldr	r0, [pc, #48]	; (8004a24 <prvInitialiseTaskLists+0x6c>)
 80049f2:	f7fe fcbb 	bl	800336c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049f6:	480c      	ldr	r0, [pc, #48]	; (8004a28 <prvInitialiseTaskLists+0x70>)
 80049f8:	f7fe fcb8 	bl	800336c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049fc:	480b      	ldr	r0, [pc, #44]	; (8004a2c <prvInitialiseTaskLists+0x74>)
 80049fe:	f7fe fcb5 	bl	800336c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <prvInitialiseTaskLists+0x78>)
 8004a04:	4a05      	ldr	r2, [pc, #20]	; (8004a1c <prvInitialiseTaskLists+0x64>)
 8004a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <prvInitialiseTaskLists+0x7c>)
 8004a0a:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <prvInitialiseTaskLists+0x68>)
 8004a0c:	601a      	str	r2, [r3, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200008f0 	.word	0x200008f0
 8004a1c:	20000d50 	.word	0x20000d50
 8004a20:	20000d64 	.word	0x20000d64
 8004a24:	20000d80 	.word	0x20000d80
 8004a28:	20000d94 	.word	0x20000d94
 8004a2c:	20000dac 	.word	0x20000dac
 8004a30:	20000d78 	.word	0x20000d78
 8004a34:	20000d7c 	.word	0x20000d7c

08004a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a3e:	e019      	b.n	8004a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a40:	f000 fdd8 	bl	80055f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <prvCheckTasksWaitingTermination+0x50>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fd15 	bl	8003480 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <prvCheckTasksWaitingTermination+0x54>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <prvCheckTasksWaitingTermination+0x54>)
 8004a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <prvCheckTasksWaitingTermination+0x58>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <prvCheckTasksWaitingTermination+0x58>)
 8004a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a6a:	f000 fdf3 	bl	8005654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f810 	bl	8004a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <prvCheckTasksWaitingTermination+0x58>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e1      	bne.n	8004a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000d94 	.word	0x20000d94
 8004a8c:	20000dc0 	.word	0x20000dc0
 8004a90:	20000da8 	.word	0x20000da8

08004a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3354      	adds	r3, #84	; 0x54
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 f8bb 	bl	8005c1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d108      	bne.n	8004ac2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 ff8b 	bl	80059d0 <vPortFree>
				vPortFree( pxTCB );
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 ff88 	bl	80059d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ac0:	e018      	b.n	8004af4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d103      	bne.n	8004ad4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 ff7f 	bl	80059d0 <vPortFree>
	}
 8004ad2:	e00f      	b.n	8004af4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d00a      	beq.n	8004af4 <prvDeleteTCB+0x60>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	60fb      	str	r3, [r7, #12]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <prvDeleteTCB+0x5e>
	}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <prvResetNextTaskUnblockTime+0x38>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <prvResetNextTaskUnblockTime+0x3c>)
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b14:	e008      	b.n	8004b28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b16:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <prvResetNextTaskUnblockTime+0x38>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <prvResetNextTaskUnblockTime+0x3c>)
 8004b26:	6013      	str	r3, [r2, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	20000d78 	.word	0x20000d78
 8004b38:	20000de0 	.word	0x20000de0

08004b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <xTaskGetSchedulerState+0x34>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	e008      	b.n	8004b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <xTaskGetSchedulerState+0x38>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	e001      	b.n	8004b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b62:	687b      	ldr	r3, [r7, #4]
	}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20000dcc 	.word	0x20000dcc
 8004b74:	20000de8 	.word	0x20000de8

08004b78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d056      	beq.n	8004c3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b8e:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <xTaskPriorityDisinherit+0xd0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d00a      	beq.n	8004bae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	60fb      	str	r3, [r7, #12]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60bb      	str	r3, [r7, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	1e5a      	subs	r2, r3, #1
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d02c      	beq.n	8004c3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d128      	bne.n	8004c3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fc46 	bl	8003480 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <xTaskPriorityDisinherit+0xd4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d903      	bls.n	8004c1c <xTaskPriorityDisinherit+0xa4>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	4a0c      	ldr	r2, [pc, #48]	; (8004c4c <xTaskPriorityDisinherit+0xd4>)
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4a09      	ldr	r2, [pc, #36]	; (8004c50 <xTaskPriorityDisinherit+0xd8>)
 8004c2a:	441a      	add	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7fe fbc7 	bl	80033c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c3c:	697b      	ldr	r3, [r7, #20]
	}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200008ec 	.word	0x200008ec
 8004c4c:	20000dc8 	.word	0x20000dc8
 8004c50:	200008f0 	.word	0x200008f0

08004c54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c5e:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe fc08 	bl	8003480 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d10a      	bne.n	8004c8e <prvAddCurrentTaskToDelayedList+0x3a>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4819      	ldr	r0, [pc, #100]	; (8004cec <prvAddCurrentTaskToDelayedList+0x98>)
 8004c88:	f7fe fb9d 	bl	80033c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c8c:	e026      	b.n	8004cdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4413      	add	r3, r2
 8004c94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d209      	bcs.n	8004cba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fe fbab 	bl	800340e <vListInsert>
}
 8004cb8:	e010      	b.n	8004cdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f7fe fba1 	bl	800340e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d202      	bcs.n	8004cdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cd6:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6013      	str	r3, [r2, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20000dc4 	.word	0x20000dc4
 8004ce8:	200008ec 	.word	0x200008ec
 8004cec:	20000dac 	.word	0x20000dac
 8004cf0:	20000d7c 	.word	0x20000d7c
 8004cf4:	20000d78 	.word	0x20000d78
 8004cf8:	20000de0 	.word	0x20000de0

08004cfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d06:	f000 fb07 	bl	8005318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d0a:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <xTimerCreateTimerTask+0x80>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d021      	beq.n	8004d56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d1a:	1d3a      	adds	r2, r7, #4
 8004d1c:	f107 0108 	add.w	r1, r7, #8
 8004d20:	f107 030c 	add.w	r3, r7, #12
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fb07 	bl	8003338 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	9202      	str	r2, [sp, #8]
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	2302      	movs	r3, #2
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	4910      	ldr	r1, [pc, #64]	; (8004d80 <xTimerCreateTimerTask+0x84>)
 8004d3e:	4811      	ldr	r0, [pc, #68]	; (8004d84 <xTimerCreateTimerTask+0x88>)
 8004d40:	f7ff f8b4 	bl	8003eac <xTaskCreateStatic>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <xTimerCreateTimerTask+0x8c>)
 8004d48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d4a:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <xTimerCreateTimerTask+0x8c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d52:	2301      	movs	r3, #1
 8004d54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	613b      	str	r3, [r7, #16]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d72:	697b      	ldr	r3, [r7, #20]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20000e1c 	.word	0x20000e1c
 8004d80:	08005e0c 	.word	0x08005e0c
 8004d84:	08004ec1 	.word	0x08004ec1
 8004d88:	20000e20 	.word	0x20000e20

08004d8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xTimerGenericCommand+0x2e>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	623b      	str	r3, [r7, #32]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <xTimerGenericCommand+0x98>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d02a      	beq.n	8004e18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	dc18      	bgt.n	8004e06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004dd4:	f7ff feb2 	bl	8004b3c <xTaskGetSchedulerState>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d109      	bne.n	8004df2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dde:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <xTimerGenericCommand+0x98>)
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	f107 0110 	add.w	r1, r7, #16
 8004de6:	2300      	movs	r3, #0
 8004de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dea:	f7fe fc77 	bl	80036dc <xQueueGenericSend>
 8004dee:	6278      	str	r0, [r7, #36]	; 0x24
 8004df0:	e012      	b.n	8004e18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <xTimerGenericCommand+0x98>)
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	f107 0110 	add.w	r1, r7, #16
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f7fe fc6d 	bl	80036dc <xQueueGenericSend>
 8004e02:	6278      	str	r0, [r7, #36]	; 0x24
 8004e04:	e008      	b.n	8004e18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e06:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <xTimerGenericCommand+0x98>)
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	f107 0110 	add.w	r1, r7, #16
 8004e0e:	2300      	movs	r3, #0
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	f7fe fd61 	bl	80038d8 <xQueueGenericSendFromISR>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3728      	adds	r7, #40	; 0x28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000e1c 	.word	0x20000e1c

08004e28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e32:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <prvProcessExpiredTimer+0x94>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fe fb1d 	bl	8003480 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d022      	beq.n	8004e9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	18d1      	adds	r1, r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f000 f8d1 	bl	8005008 <prvInsertTimerInActiveList>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01f      	beq.n	8004eac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	2300      	movs	r3, #0
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	2100      	movs	r1, #0
 8004e76:	6978      	ldr	r0, [r7, #20]
 8004e78:	f7ff ff88 	bl	8004d8c <xTimerGenericCommand>
 8004e7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d113      	bne.n	8004eac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	60fb      	str	r3, [r7, #12]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	6978      	ldr	r0, [r7, #20]
 8004eb2:	4798      	blx	r3
}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000e14 	.word	0x20000e14

08004ec0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ec8:	f107 0308 	add.w	r3, r7, #8
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f857 	bl	8004f80 <prvGetNextExpireTime>
 8004ed2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f803 	bl	8004ee4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ede:	f000 f8d5 	bl	800508c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ee2:	e7f1      	b.n	8004ec8 <prvTimerTask+0x8>

08004ee4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004eee:	f7ff fa39 	bl	8004364 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f866 	bl	8004fc8 <prvSampleTimeNow>
 8004efc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d130      	bne.n	8004f66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <prvProcessTimerOrBlockTask+0x3c>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d806      	bhi.n	8004f20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f12:	f7ff fa35 	bl	8004380 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff ff85 	bl	8004e28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f1e:	e024      	b.n	8004f6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f26:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <prvProcessTimerOrBlockTask+0x90>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <prvProcessTimerOrBlockTask+0x50>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <prvProcessTimerOrBlockTask+0x52>
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <prvProcessTimerOrBlockTask+0x94>)
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	4619      	mov	r1, r3
 8004f46:	f7fe ff7d 	bl	8003e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f4a:	f7ff fa19 	bl	8004380 <xTaskResumeAll>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <prvProcessTimerOrBlockTask+0x98>)
 8004f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	f3bf 8f6f 	isb	sy
}
 8004f64:	e001      	b.n	8004f6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f66:	f7ff fa0b 	bl	8004380 <xTaskResumeAll>
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000e18 	.word	0x20000e18
 8004f78:	20000e1c 	.word	0x20000e1c
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f88:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <prvGetNextExpireTime+0x44>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <prvGetNextExpireTime+0x16>
 8004f92:	2201      	movs	r2, #1
 8004f94:	e000      	b.n	8004f98 <prvGetNextExpireTime+0x18>
 8004f96:	2200      	movs	r2, #0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <prvGetNextExpireTime+0x44>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e001      	b.n	8004fb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000e14 	.word	0x20000e14

08004fc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fd0:	f7ff fa74 	bl	80044bc <xTaskGetTickCount>
 8004fd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <prvSampleTimeNow+0x3c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d205      	bcs.n	8004fec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fe0:	f000 f936 	bl	8005250 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e002      	b.n	8004ff2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ff2:	4a04      	ldr	r2, [pc, #16]	; (8005004 <prvSampleTimeNow+0x3c>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000e24 	.word	0x20000e24

08005008 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d812      	bhi.n	8005054 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	429a      	cmp	r2, r3
 800503a:	d302      	bcc.n	8005042 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800503c:	2301      	movs	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e01b      	b.n	800507a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <prvInsertTimerInActiveList+0x7c>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f7fe f9de 	bl	800340e <vListInsert>
 8005052:	e012      	b.n	800507a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d206      	bcs.n	800506a <prvInsertTimerInActiveList+0x62>
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d302      	bcc.n	800506a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005064:	2301      	movs	r3, #1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e007      	b.n	800507a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800506a:	4b07      	ldr	r3, [pc, #28]	; (8005088 <prvInsertTimerInActiveList+0x80>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3304      	adds	r3, #4
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f7fe f9ca 	bl	800340e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800507a:	697b      	ldr	r3, [r7, #20]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000e18 	.word	0x20000e18
 8005088:	20000e14 	.word	0x20000e14

0800508c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08e      	sub	sp, #56	; 0x38
 8005090:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005092:	e0ca      	b.n	800522a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	da18      	bge.n	80050cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	3304      	adds	r3, #4
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	61fb      	str	r3, [r7, #28]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c2:	6850      	ldr	r0, [r2, #4]
 80050c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c6:	6892      	ldr	r2, [r2, #8]
 80050c8:	4611      	mov	r1, r2
 80050ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f2c0 80ab 	blt.w	800522a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	3304      	adds	r3, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe f9cb 	bl	8003480 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050ea:	463b      	mov	r3, r7
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ff6b 	bl	8004fc8 <prvSampleTimeNow>
 80050f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b09      	cmp	r3, #9
 80050f8:	f200 8096 	bhi.w	8005228 <prvProcessReceivedCommands+0x19c>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <prvProcessReceivedCommands+0x78>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	0800512d 	.word	0x0800512d
 8005108:	0800512d 	.word	0x0800512d
 800510c:	0800512d 	.word	0x0800512d
 8005110:	080051a1 	.word	0x080051a1
 8005114:	080051b5 	.word	0x080051b5
 8005118:	080051ff 	.word	0x080051ff
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800512d 	.word	0x0800512d
 8005124:	080051a1 	.word	0x080051a1
 8005128:	080051b5 	.word	0x080051b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	b2da      	uxtb	r2, r3
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	18d1      	adds	r1, r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800514c:	f7ff ff5c 	bl	8005008 <prvInsertTimerInActiveList>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d069      	beq.n	800522a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800515c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d05e      	beq.n	800522a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	441a      	add	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	2300      	movs	r3, #0
 800517a:	2100      	movs	r1, #0
 800517c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517e:	f7ff fe05 	bl	8004d8c <xTimerGenericCommand>
 8005182:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d14f      	bne.n	800522a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61bb      	str	r3, [r7, #24]
}
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051b2:	e03a      	b.n	800522a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	617b      	str	r3, [r7, #20]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	18d1      	adds	r1, r2, r3
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f8:	f7ff ff06 	bl	8005008 <prvInsertTimerInActiveList>
					break;
 80051fc:	e015      	b.n	800522a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800520c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800520e:	f000 fbdf 	bl	80059d0 <vPortFree>
 8005212:	e00a      	b.n	800522a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005226:	e000      	b.n	800522a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005228:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <prvProcessReceivedCommands+0x1c0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	1d39      	adds	r1, r7, #4
 8005230:	2200      	movs	r2, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe fbec 	bl	8003a10 <xQueueReceive>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	f47f af2a 	bne.w	8005094 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3730      	adds	r7, #48	; 0x30
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000e1c 	.word	0x20000e1c

08005250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005256:	e048      	b.n	80052ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005258:	4b2d      	ldr	r3, [pc, #180]	; (8005310 <prvSwitchTimerLists+0xc0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005262:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <prvSwitchTimerLists+0xc0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3304      	adds	r3, #4
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe f905 	bl	8003480 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d02e      	beq.n	80052ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	429a      	cmp	r2, r3
 800529c:	d90e      	bls.n	80052bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052aa:	4b19      	ldr	r3, [pc, #100]	; (8005310 <prvSwitchTimerLists+0xc0>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f7fe f8aa 	bl	800340e <vListInsert>
 80052ba:	e016      	b.n	80052ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052bc:	2300      	movs	r3, #0
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	2300      	movs	r3, #0
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	2100      	movs	r1, #0
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff fd60 	bl	8004d8c <xTimerGenericCommand>
 80052cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	603b      	str	r3, [r7, #0]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <prvSwitchTimerLists+0xc0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1b1      	bne.n	8005258 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <prvSwitchTimerLists+0xc0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <prvSwitchTimerLists+0xc4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a04      	ldr	r2, [pc, #16]	; (8005310 <prvSwitchTimerLists+0xc0>)
 8005300:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005302:	4a04      	ldr	r2, [pc, #16]	; (8005314 <prvSwitchTimerLists+0xc4>)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	6013      	str	r3, [r2, #0]
}
 8005308:	bf00      	nop
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20000e14 	.word	0x20000e14
 8005314:	20000e18 	.word	0x20000e18

08005318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800531e:	f000 f969 	bl	80055f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <prvCheckForValidListAndQueue+0x60>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d120      	bne.n	800536c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800532a:	4814      	ldr	r0, [pc, #80]	; (800537c <prvCheckForValidListAndQueue+0x64>)
 800532c:	f7fe f81e 	bl	800336c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005330:	4813      	ldr	r0, [pc, #76]	; (8005380 <prvCheckForValidListAndQueue+0x68>)
 8005332:	f7fe f81b 	bl	800336c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <prvCheckForValidListAndQueue+0x6c>)
 8005338:	4a10      	ldr	r2, [pc, #64]	; (800537c <prvCheckForValidListAndQueue+0x64>)
 800533a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <prvCheckForValidListAndQueue+0x70>)
 800533e:	4a10      	ldr	r2, [pc, #64]	; (8005380 <prvCheckForValidListAndQueue+0x68>)
 8005340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005342:	2300      	movs	r3, #0
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4b11      	ldr	r3, [pc, #68]	; (800538c <prvCheckForValidListAndQueue+0x74>)
 8005348:	4a11      	ldr	r2, [pc, #68]	; (8005390 <prvCheckForValidListAndQueue+0x78>)
 800534a:	2110      	movs	r1, #16
 800534c:	200a      	movs	r0, #10
 800534e:	f7fe f929 	bl	80035a4 <xQueueGenericCreateStatic>
 8005352:	4603      	mov	r3, r0
 8005354:	4a08      	ldr	r2, [pc, #32]	; (8005378 <prvCheckForValidListAndQueue+0x60>)
 8005356:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <prvCheckForValidListAndQueue+0x60>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <prvCheckForValidListAndQueue+0x60>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	490b      	ldr	r1, [pc, #44]	; (8005394 <prvCheckForValidListAndQueue+0x7c>)
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fd42 	bl	8003df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800536c:	f000 f972 	bl	8005654 <vPortExitCritical>
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000e1c 	.word	0x20000e1c
 800537c:	20000dec 	.word	0x20000dec
 8005380:	20000e00 	.word	0x20000e00
 8005384:	20000e14 	.word	0x20000e14
 8005388:	20000e18 	.word	0x20000e18
 800538c:	20000ec8 	.word	0x20000ec8
 8005390:	20000e28 	.word	0x20000e28
 8005394:	08005e14 	.word	0x08005e14

08005398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b04      	subs	r3, #4
 80053a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3b04      	subs	r3, #4
 80053b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f023 0201 	bic.w	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b04      	subs	r3, #4
 80053c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053c8:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <pxPortInitialiseStack+0x64>)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b14      	subs	r3, #20
 80053d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b04      	subs	r3, #4
 80053de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f06f 0202 	mvn.w	r2, #2
 80053e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3b20      	subs	r3, #32
 80053ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053ee:	68fb      	ldr	r3, [r7, #12]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	08005401 	.word	0x08005401

08005400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <prvTaskExitError+0x54>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d00a      	beq.n	800542a <prvTaskExitError+0x2a>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <prvTaskExitError+0x28>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	60bb      	str	r3, [r7, #8]
}
 800543c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800543e:	bf00      	nop
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0fc      	beq.n	8005440 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	2000000c 	.word	0x2000000c
	...

08005460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <pxCurrentTCBConst2>)
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	6808      	ldr	r0, [r1, #0]
 8005466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546a:	f380 8809 	msr	PSP, r0
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f380 8811 	msr	BASEPRI, r0
 800547a:	4770      	bx	lr
 800547c:	f3af 8000 	nop.w

08005480 <pxCurrentTCBConst2>:
 8005480:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop

08005488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005488:	4808      	ldr	r0, [pc, #32]	; (80054ac <prvPortStartFirstTask+0x24>)
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	6800      	ldr	r0, [r0, #0]
 800548e:	f380 8808 	msr	MSP, r0
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8814 	msr	CONTROL, r0
 800549a:	b662      	cpsie	i
 800549c:	b661      	cpsie	f
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	df00      	svc	0
 80054a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054aa:	bf00      	nop
 80054ac:	e000ed08 	.word	0xe000ed08

080054b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054b6:	4b46      	ldr	r3, [pc, #280]	; (80055d0 <xPortStartScheduler+0x120>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a46      	ldr	r2, [pc, #280]	; (80055d4 <xPortStartScheduler+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10a      	bne.n	80054d6 <xPortStartScheduler+0x26>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	613b      	str	r3, [r7, #16]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054d6:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <xPortStartScheduler+0x120>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3f      	ldr	r2, [pc, #252]	; (80055d8 <xPortStartScheduler+0x128>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10a      	bne.n	80054f6 <xPortStartScheduler+0x46>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054f6:	4b39      	ldr	r3, [pc, #228]	; (80055dc <xPortStartScheduler+0x12c>)
 80054f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005518:	b2da      	uxtb	r2, r3
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <xPortStartScheduler+0x130>)
 800551c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800551e:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <xPortStartScheduler+0x134>)
 8005520:	2207      	movs	r2, #7
 8005522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005524:	e009      	b.n	800553a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <xPortStartScheduler+0x134>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3b01      	subs	r3, #1
 800552c:	4a2d      	ldr	r2, [pc, #180]	; (80055e4 <xPortStartScheduler+0x134>)
 800552e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d0ef      	beq.n	8005526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <xPortStartScheduler+0x134>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1c3 0307 	rsb	r3, r3, #7
 800554e:	2b04      	cmp	r3, #4
 8005550:	d00a      	beq.n	8005568 <xPortStartScheduler+0xb8>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60bb      	str	r3, [r7, #8]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <xPortStartScheduler+0x134>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <xPortStartScheduler+0x134>)
 8005570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <xPortStartScheduler+0x134>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800557a:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <xPortStartScheduler+0x134>)
 800557c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <xPortStartScheduler+0x138>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <xPortStartScheduler+0x138>)
 800558c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005592:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <xPortStartScheduler+0x138>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <xPortStartScheduler+0x138>)
 8005598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800559c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800559e:	f000 f8dd 	bl	800575c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <xPortStartScheduler+0x13c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055a8:	f000 f8fc 	bl	80057a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055ac:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <xPortStartScheduler+0x140>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0f      	ldr	r2, [pc, #60]	; (80055f0 <xPortStartScheduler+0x140>)
 80055b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055b8:	f7ff ff66 	bl	8005488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055bc:	f7ff f848 	bl	8004650 <vTaskSwitchContext>
	prvTaskExitError();
 80055c0:	f7ff ff1e 	bl	8005400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	e000ed00 	.word	0xe000ed00
 80055d4:	410fc271 	.word	0x410fc271
 80055d8:	410fc270 	.word	0x410fc270
 80055dc:	e000e400 	.word	0xe000e400
 80055e0:	20000f18 	.word	0x20000f18
 80055e4:	20000f1c 	.word	0x20000f1c
 80055e8:	e000ed20 	.word	0xe000ed20
 80055ec:	2000000c 	.word	0x2000000c
 80055f0:	e000ef34 	.word	0xe000ef34

080055f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	607b      	str	r3, [r7, #4]
}
 800560c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <vPortEnterCritical+0x58>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a0d      	ldr	r2, [pc, #52]	; (800564c <vPortEnterCritical+0x58>)
 8005616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <vPortEnterCritical+0x58>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10f      	bne.n	8005640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <vPortEnterCritical+0x5c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <vPortEnterCritical+0x4c>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	603b      	str	r3, [r7, #0]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <vPortEnterCritical+0x4a>
	}
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	2000000c 	.word	0x2000000c
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800565a:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <vPortExitCritical+0x50>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <vPortExitCritical+0x24>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	607b      	str	r3, [r7, #4]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <vPortExitCritical+0x50>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3b01      	subs	r3, #1
 800567e:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <vPortExitCritical+0x50>)
 8005680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <vPortExitCritical+0x50>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d105      	bne.n	8005696 <vPortExitCritical+0x42>
 800568a:	2300      	movs	r3, #0
 800568c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	f383 8811 	msr	BASEPRI, r3
}
 8005694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2000000c 	.word	0x2000000c
	...

080056b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056b0:	f3ef 8009 	mrs	r0, PSP
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	4b15      	ldr	r3, [pc, #84]	; (8005710 <pxCurrentTCBConst>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f01e 0f10 	tst.w	lr, #16
 80056c0:	bf08      	it	eq
 80056c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	6010      	str	r0, [r2, #0]
 80056cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056d4:	f380 8811 	msr	BASEPRI, r0
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f7fe ffb6 	bl	8004650 <vTaskSwitchContext>
 80056e4:	f04f 0000 	mov.w	r0, #0
 80056e8:	f380 8811 	msr	BASEPRI, r0
 80056ec:	bc09      	pop	{r0, r3}
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	6808      	ldr	r0, [r1, #0]
 80056f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f6:	f01e 0f10 	tst.w	lr, #16
 80056fa:	bf08      	it	eq
 80056fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005700:	f380 8809 	msr	PSP, r0
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	f3af 8000 	nop.w

08005710 <pxCurrentTCBConst>:
 8005710:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	607b      	str	r3, [r7, #4]
}
 8005730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005732:	f7fe fed3 	bl	80044dc <xTaskIncrementTick>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <xPortSysTickHandler+0x40>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f383 8811 	msr	BASEPRI, r3
}
 800574e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <vPortSetupTimerInterrupt+0x38>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <vPortSetupTimerInterrupt+0x3c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <vPortSetupTimerInterrupt+0x40>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <vPortSetupTimerInterrupt+0x44>)
 800577a:	3b01      	subs	r3, #1
 800577c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005780:	2207      	movs	r2, #7
 8005782:	601a      	str	r2, [r3, #0]
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000e010 	.word	0xe000e010
 8005794:	e000e018 	.word	0xe000e018
 8005798:	20000000 	.word	0x20000000
 800579c:	10624dd3 	.word	0x10624dd3
 80057a0:	e000e014 	.word	0xe000e014

080057a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057b4 <vPortEnableVFP+0x10>
 80057a8:	6801      	ldr	r1, [r0, #0]
 80057aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ae:	6001      	str	r1, [r0, #0]
 80057b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057b2:	bf00      	nop
 80057b4:	e000ed88 	.word	0xe000ed88

080057b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057be:	f3ef 8305 	mrs	r3, IPSR
 80057c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	d914      	bls.n	80057f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ca:	4a17      	ldr	r2, [pc, #92]	; (8005828 <vPortValidateInterruptPriority+0x70>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <vPortValidateInterruptPriority+0x74>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	7afa      	ldrb	r2, [r7, #11]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d20a      	bcs.n	80057f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	607b      	str	r3, [r7, #4]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057f4:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <vPortValidateInterruptPriority+0x78>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <vPortValidateInterruptPriority+0x7c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d90a      	bls.n	800581a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	603b      	str	r3, [r7, #0]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <vPortValidateInterruptPriority+0x60>
	}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	e000e3f0 	.word	0xe000e3f0
 800582c:	20000f18 	.word	0x20000f18
 8005830:	e000ed0c 	.word	0xe000ed0c
 8005834:	20000f1c 	.word	0x20000f1c

08005838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005844:	f7fe fd8e 	bl	8004364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005848:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <pvPortMalloc+0x180>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005850:	f000 f920 	bl	8005a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <pvPortMalloc+0x184>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	f040 8093 	bne.w	8005988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01d      	beq.n	80058a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005868:	2208      	movs	r2, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b00      	cmp	r3, #0
 8005878:	d014      	beq.n	80058a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f023 0307 	bic.w	r3, r3, #7
 8005880:	3308      	adds	r3, #8
 8005882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <pvPortMalloc+0x6c>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	617b      	str	r3, [r7, #20]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d06e      	beq.n	8005988 <pvPortMalloc+0x150>
 80058aa:	4b45      	ldr	r3, [pc, #276]	; (80059c0 <pvPortMalloc+0x188>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d869      	bhi.n	8005988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058b4:	4b43      	ldr	r3, [pc, #268]	; (80059c4 <pvPortMalloc+0x18c>)
 80058b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058b8:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <pvPortMalloc+0x18c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058be:	e004      	b.n	80058ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d903      	bls.n	80058dc <pvPortMalloc+0xa4>
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f1      	bne.n	80058c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <pvPortMalloc+0x180>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d050      	beq.n	8005988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2208      	movs	r2, #8
 80058ec:	4413      	add	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	2308      	movs	r3, #8
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	429a      	cmp	r2, r3
 8005906:	d91f      	bls.n	8005948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <pvPortMalloc+0xf8>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	613b      	str	r3, [r7, #16]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005942:	69b8      	ldr	r0, [r7, #24]
 8005944:	f000 f908 	bl	8005b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <pvPortMalloc+0x188>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <pvPortMalloc+0x188>)
 8005954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005956:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <pvPortMalloc+0x188>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <pvPortMalloc+0x190>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d203      	bcs.n	800596a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005962:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <pvPortMalloc+0x188>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <pvPortMalloc+0x190>)
 8005968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <pvPortMalloc+0x184>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	431a      	orrs	r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <pvPortMalloc+0x194>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a11      	ldr	r2, [pc, #68]	; (80059cc <pvPortMalloc+0x194>)
 8005986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005988:	f7fe fcfa 	bl	8004380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <pvPortMalloc+0x174>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <pvPortMalloc+0x172>
	return pvReturn;
 80059ac:	69fb      	ldr	r3, [r7, #28]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20003e08 	.word	0x20003e08
 80059bc:	20003e1c 	.word	0x20003e1c
 80059c0:	20003e0c 	.word	0x20003e0c
 80059c4:	20003e00 	.word	0x20003e00
 80059c8:	20003e10 	.word	0x20003e10
 80059cc:	20003e14 	.word	0x20003e14

080059d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04d      	beq.n	8005a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059e2:	2308      	movs	r3, #8
 80059e4:	425b      	negs	r3, r3
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <vPortFree+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <vPortFree+0x44>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60fb      	str	r3, [r7, #12]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <vPortFree+0x62>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	60bb      	str	r3, [r7, #8]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <vPortFree+0xb8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01e      	beq.n	8005a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11a      	bne.n	8005a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <vPortFree+0xb8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	401a      	ands	r2, r3
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a58:	f7fe fc84 	bl	8004364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <vPortFree+0xbc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <vPortFree+0xbc>)
 8005a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f000 f874 	bl	8005b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <vPortFree+0xc0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <vPortFree+0xc0>)
 8005a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a7a:	f7fe fc81 	bl	8004380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20003e1c 	.word	0x20003e1c
 8005a8c:	20003e0c 	.word	0x20003e0c
 8005a90:	20003e18 	.word	0x20003e18

08005a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a9a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005aa0:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <prvHeapInit+0xac>)
 8005aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3307      	adds	r3, #7
 8005ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0307 	bic.w	r3, r3, #7
 8005aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <prvHeapInit+0xac>)
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <prvHeapInit+0xb0>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <prvHeapInit+0xb0>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4413      	add	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <prvHeapInit+0xb4>)
 8005af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <prvHeapInit+0xb4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <prvHeapInit+0xb4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <prvHeapInit+0xb4>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <prvHeapInit+0xb8>)
 8005b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <prvHeapInit+0xbc>)
 8005b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <prvHeapInit+0xc0>)
 8005b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	20000f20 	.word	0x20000f20
 8005b44:	20003e00 	.word	0x20003e00
 8005b48:	20003e08 	.word	0x20003e08
 8005b4c:	20003e10 	.word	0x20003e10
 8005b50:	20003e0c 	.word	0x20003e0c
 8005b54:	20003e1c 	.word	0x20003e1c

08005b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <prvInsertBlockIntoFreeList+0xac>)
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e002      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x14>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d8f7      	bhi.n	8005b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d108      	bne.n	8005b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	441a      	add	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d118      	bne.n	8005be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <prvInsertBlockIntoFreeList+0xb0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d00d      	beq.n	8005bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e008      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <prvInsertBlockIntoFreeList+0xb0>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e003      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d002      	beq.n	8005bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20003e00 	.word	0x20003e00
 8005c08:	20003e08 	.word	0x20003e08

08005c0c <memset>:
 8005c0c:	4402      	add	r2, r0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d100      	bne.n	8005c16 <memset+0xa>
 8005c14:	4770      	bx	lr
 8005c16:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1a:	e7f9      	b.n	8005c10 <memset+0x4>

08005c1c <_reclaim_reent>:
 8005c1c:	4b29      	ldr	r3, [pc, #164]	; (8005cc4 <_reclaim_reent+0xa8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4283      	cmp	r3, r0
 8005c22:	b570      	push	{r4, r5, r6, lr}
 8005c24:	4604      	mov	r4, r0
 8005c26:	d04b      	beq.n	8005cc0 <_reclaim_reent+0xa4>
 8005c28:	69c3      	ldr	r3, [r0, #28]
 8005c2a:	b143      	cbz	r3, 8005c3e <_reclaim_reent+0x22>
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d144      	bne.n	8005cbc <_reclaim_reent+0xa0>
 8005c32:	69e3      	ldr	r3, [r4, #28]
 8005c34:	6819      	ldr	r1, [r3, #0]
 8005c36:	b111      	cbz	r1, 8005c3e <_reclaim_reent+0x22>
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 f879 	bl	8005d30 <_free_r>
 8005c3e:	6961      	ldr	r1, [r4, #20]
 8005c40:	b111      	cbz	r1, 8005c48 <_reclaim_reent+0x2c>
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f874 	bl	8005d30 <_free_r>
 8005c48:	69e1      	ldr	r1, [r4, #28]
 8005c4a:	b111      	cbz	r1, 8005c52 <_reclaim_reent+0x36>
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 f86f 	bl	8005d30 <_free_r>
 8005c52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c54:	b111      	cbz	r1, 8005c5c <_reclaim_reent+0x40>
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 f86a 	bl	8005d30 <_free_r>
 8005c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c5e:	b111      	cbz	r1, 8005c66 <_reclaim_reent+0x4a>
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f865 	bl	8005d30 <_free_r>
 8005c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005c68:	b111      	cbz	r1, 8005c70 <_reclaim_reent+0x54>
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 f860 	bl	8005d30 <_free_r>
 8005c70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c72:	b111      	cbz	r1, 8005c7a <_reclaim_reent+0x5e>
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 f85b 	bl	8005d30 <_free_r>
 8005c7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005c7c:	b111      	cbz	r1, 8005c84 <_reclaim_reent+0x68>
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 f856 	bl	8005d30 <_free_r>
 8005c84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c86:	b111      	cbz	r1, 8005c8e <_reclaim_reent+0x72>
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f851 	bl	8005d30 <_free_r>
 8005c8e:	6a23      	ldr	r3, [r4, #32]
 8005c90:	b1b3      	cbz	r3, 8005cc0 <_reclaim_reent+0xa4>
 8005c92:	4620      	mov	r0, r4
 8005c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c98:	4718      	bx	r3
 8005c9a:	5949      	ldr	r1, [r1, r5]
 8005c9c:	b941      	cbnz	r1, 8005cb0 <_reclaim_reent+0x94>
 8005c9e:	3504      	adds	r5, #4
 8005ca0:	69e3      	ldr	r3, [r4, #28]
 8005ca2:	2d80      	cmp	r5, #128	; 0x80
 8005ca4:	68d9      	ldr	r1, [r3, #12]
 8005ca6:	d1f8      	bne.n	8005c9a <_reclaim_reent+0x7e>
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 f841 	bl	8005d30 <_free_r>
 8005cae:	e7c0      	b.n	8005c32 <_reclaim_reent+0x16>
 8005cb0:	680e      	ldr	r6, [r1, #0]
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 f83c 	bl	8005d30 <_free_r>
 8005cb8:	4631      	mov	r1, r6
 8005cba:	e7ef      	b.n	8005c9c <_reclaim_reent+0x80>
 8005cbc:	2500      	movs	r5, #0
 8005cbe:	e7ef      	b.n	8005ca0 <_reclaim_reent+0x84>
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
 8005cc2:	bf00      	nop
 8005cc4:	2000005c 	.word	0x2000005c

08005cc8 <__libc_init_array>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	4d0d      	ldr	r5, [pc, #52]	; (8005d00 <__libc_init_array+0x38>)
 8005ccc:	4c0d      	ldr	r4, [pc, #52]	; (8005d04 <__libc_init_array+0x3c>)
 8005cce:	1b64      	subs	r4, r4, r5
 8005cd0:	10a4      	asrs	r4, r4, #2
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	42a6      	cmp	r6, r4
 8005cd6:	d109      	bne.n	8005cec <__libc_init_array+0x24>
 8005cd8:	4d0b      	ldr	r5, [pc, #44]	; (8005d08 <__libc_init_array+0x40>)
 8005cda:	4c0c      	ldr	r4, [pc, #48]	; (8005d0c <__libc_init_array+0x44>)
 8005cdc:	f000 f880 	bl	8005de0 <_init>
 8005ce0:	1b64      	subs	r4, r4, r5
 8005ce2:	10a4      	asrs	r4, r4, #2
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	42a6      	cmp	r6, r4
 8005ce8:	d105      	bne.n	8005cf6 <__libc_init_array+0x2e>
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf0:	4798      	blx	r3
 8005cf2:	3601      	adds	r6, #1
 8005cf4:	e7ee      	b.n	8005cd4 <__libc_init_array+0xc>
 8005cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfa:	4798      	blx	r3
 8005cfc:	3601      	adds	r6, #1
 8005cfe:	e7f2      	b.n	8005ce6 <__libc_init_array+0x1e>
 8005d00:	08005e90 	.word	0x08005e90
 8005d04:	08005e90 	.word	0x08005e90
 8005d08:	08005e90 	.word	0x08005e90
 8005d0c:	08005e94 	.word	0x08005e94

08005d10 <__retarget_lock_acquire_recursive>:
 8005d10:	4770      	bx	lr

08005d12 <__retarget_lock_release_recursive>:
 8005d12:	4770      	bx	lr

08005d14 <memcpy>:
 8005d14:	440a      	add	r2, r1
 8005d16:	4291      	cmp	r1, r2
 8005d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d1c:	d100      	bne.n	8005d20 <memcpy+0xc>
 8005d1e:	4770      	bx	lr
 8005d20:	b510      	push	{r4, lr}
 8005d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d2a:	4291      	cmp	r1, r2
 8005d2c:	d1f9      	bne.n	8005d22 <memcpy+0xe>
 8005d2e:	bd10      	pop	{r4, pc}

08005d30 <_free_r>:
 8005d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d044      	beq.n	8005dc0 <_free_r+0x90>
 8005d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3a:	9001      	str	r0, [sp, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005d42:	bfb8      	it	lt
 8005d44:	18e4      	addlt	r4, r4, r3
 8005d46:	f000 f83f 	bl	8005dc8 <__malloc_lock>
 8005d4a:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <_free_r+0x94>)
 8005d4c:	9801      	ldr	r0, [sp, #4]
 8005d4e:	6813      	ldr	r3, [r2, #0]
 8005d50:	b933      	cbnz	r3, 8005d60 <_free_r+0x30>
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	6014      	str	r4, [r2, #0]
 8005d56:	b003      	add	sp, #12
 8005d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d5c:	f000 b83a 	b.w	8005dd4 <__malloc_unlock>
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d908      	bls.n	8005d76 <_free_r+0x46>
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	1961      	adds	r1, r4, r5
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	bf01      	itttt	eq
 8005d6c:	6819      	ldreq	r1, [r3, #0]
 8005d6e:	685b      	ldreq	r3, [r3, #4]
 8005d70:	1949      	addeq	r1, r1, r5
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	e7ed      	b.n	8005d52 <_free_r+0x22>
 8005d76:	461a      	mov	r2, r3
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	b10b      	cbz	r3, 8005d80 <_free_r+0x50>
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d9fa      	bls.n	8005d76 <_free_r+0x46>
 8005d80:	6811      	ldr	r1, [r2, #0]
 8005d82:	1855      	adds	r5, r2, r1
 8005d84:	42a5      	cmp	r5, r4
 8005d86:	d10b      	bne.n	8005da0 <_free_r+0x70>
 8005d88:	6824      	ldr	r4, [r4, #0]
 8005d8a:	4421      	add	r1, r4
 8005d8c:	1854      	adds	r4, r2, r1
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	6011      	str	r1, [r2, #0]
 8005d92:	d1e0      	bne.n	8005d56 <_free_r+0x26>
 8005d94:	681c      	ldr	r4, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	6053      	str	r3, [r2, #4]
 8005d9a:	440c      	add	r4, r1
 8005d9c:	6014      	str	r4, [r2, #0]
 8005d9e:	e7da      	b.n	8005d56 <_free_r+0x26>
 8005da0:	d902      	bls.n	8005da8 <_free_r+0x78>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6003      	str	r3, [r0, #0]
 8005da6:	e7d6      	b.n	8005d56 <_free_r+0x26>
 8005da8:	6825      	ldr	r5, [r4, #0]
 8005daa:	1961      	adds	r1, r4, r5
 8005dac:	428b      	cmp	r3, r1
 8005dae:	bf04      	itt	eq
 8005db0:	6819      	ldreq	r1, [r3, #0]
 8005db2:	685b      	ldreq	r3, [r3, #4]
 8005db4:	6063      	str	r3, [r4, #4]
 8005db6:	bf04      	itt	eq
 8005db8:	1949      	addeq	r1, r1, r5
 8005dba:	6021      	streq	r1, [r4, #0]
 8005dbc:	6054      	str	r4, [r2, #4]
 8005dbe:	e7ca      	b.n	8005d56 <_free_r+0x26>
 8005dc0:	b003      	add	sp, #12
 8005dc2:	bd30      	pop	{r4, r5, pc}
 8005dc4:	20003f5c 	.word	0x20003f5c

08005dc8 <__malloc_lock>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__malloc_lock+0x8>)
 8005dca:	f7ff bfa1 	b.w	8005d10 <__retarget_lock_acquire_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20003f58 	.word	0x20003f58

08005dd4 <__malloc_unlock>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__malloc_unlock+0x8>)
 8005dd6:	f7ff bf9c 	b.w	8005d12 <__retarget_lock_release_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20003f58 	.word	0x20003f58

08005de0 <_init>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	bf00      	nop
 8005de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de6:	bc08      	pop	{r3}
 8005de8:	469e      	mov	lr, r3
 8005dea:	4770      	bx	lr

08005dec <_fini>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	bf00      	nop
 8005df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df2:	bc08      	pop	{r3}
 8005df4:	469e      	mov	lr, r3
 8005df6:	4770      	bx	lr
